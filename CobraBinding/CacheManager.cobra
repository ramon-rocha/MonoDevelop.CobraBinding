
use Cobra.Compiler

use TypeSystem

use MonoDevelop.Core
use MonoDevelop.Ide.Gui

extend Document

	def getBestParsedDocument as ParsedCobraDocument?
		"""
		Return the last valid parsed document (if any). Prefer a document
		with a type-bound AST.
		"""
		fileName = .fileName.toString
		cachedDoc as ParsedCobraDocument? = CacheManager.getCachedDocument(fileName)
		cachedAst as CobraModule? = nil
		if cachedDoc <> nil, cachedAst = cachedDoc.getAst<of CobraModule?>
		
		parsedDoc = .parsedDocument to ParsedCobraDocument?
		if parsedDoc == nil, return cachedDoc
		if cachedDoc == nil, return CacheManager.addCachedDocument(parsedDoc to !)
		
		# We have a cached document and a current document.
		# Return the one with a more complete AST.
		ast = parsedDoc.getAst<of CobraModule?>
		
		if ast == nil and cachedAst == nil
			return CacheManager.addCachedDocument(parsedDoc to !)
		
		else if ast == nil and cachedAst <> nil
			return cachedDoc
			
		else if ast <> nil and cachedAst == nil
			return CacheManager.addCachedDocument(parsedDoc to !)
		
		# we have two ASTs, prefer the one with less parsing errors
		if cachedDoc.parseErrorCount < parsedDoc.parseErrorCount
			return cachedDoc
		else
			return CacheManager.addCachedDocument(parsedDoc to !)


class CacheManager

	cue init is private
		base.init

	shared
		var _cacheAccess = Object()
			"""
			Lock on this object before accessing _docs.
			
			NOTE: Never talk to CompilerManager from any method
			in this class after locking on this object. This could
			result in a deadlock.
			"""
		
		var _docs = Dictionary<of String, ParsedCobraDocument>(3)
			"""
			The two documents that were most recently parsed by the compiler.
			"""
		
		def getCachedDocument(filename as String) as ParsedCobraDocument?
			lock _cacheAccess
				document as ParsedCobraDocument? = nil
				_docs.tryGetValue(filename, out document)
				return document
		
		def addCachedDocument(document as ParsedCobraDocument) as ParsedCobraDocument
			ensure _docs.count <= 2
			lock _cacheAccess
				_docs[document.fileName] = document
				if _docs.count > 2, _removeOldestDocument
				return document
		
		def _removeOldestDocument
			require
				_docs.count > 2
			ensure
				_docs.count == 2
			test
				CacheManager.addCachedDocument(ParsedCobraDocument("foo", "old"))
				CacheManager.addCachedDocument(ParsedCobraDocument("bar", "old"))
				CacheManager.addCachedDocument(ParsedCobraDocument("foo", "new"))
				assert CacheManager.getCachedDocument("bar").content == "old"
				assert CacheManager.getCachedDocument("foo").content == "new"
				
				CacheManager.addCachedDocument(ParsedCobraDocument("bar", "new"))
				assert CacheManager.getCachedDocument("foo").content == "new"
				assert CacheManager.getCachedDocument("bar").content == "new"
				
				CacheManager.addCachedDocument(ParsedCobraDocument("somethingElse", "old"))
				CacheManager.addCachedDocument(ParsedCobraDocument("somethingElse", "new"))
				assert CacheManager.getCachedDocument("somethingElse").content == "new"
				assert CacheManager.getCachedDocument("bar").content == "new"
				assert CacheManager.getCachedDocument("foo") == nil
			body
				docs = for kv in _docs get kv.value
				oldestDoc = docs.first
				for d in docs
					if d.lastWriteTimeUtc < oldestDoc.lastWriteTimeUtc
						oldestDoc = d
				_docs.remove(oldestDoc.fileName)
		
		def clear
			CacheManager.addCachedDocument(ParsedCobraDocument("a", "A"))
			CacheManager.addCachedDocument(ParsedCobraDocument("b", "B"))
			assert CacheManager.getCachedDocument("a") <> nil
			assert CacheManager.getCachedDocument("b") <> nil
			assert CacheManager.getCachedDocument("c") == nil
			CacheManager.clear
			assert CacheManager.getCachedDocument("a") == nil
			assert CacheManager.getCachedDocument("b") == nil
			assert CacheManager.getCachedDocument("c") == nil
			lock _cacheAccess
				_docs.clear