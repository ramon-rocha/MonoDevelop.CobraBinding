use System.Diagnostics
use System.Text.RegularExpressions
use System.Xml
use System.CodeDom.Compiler

use MonoDevelop.Core
use MonoDevelop.Projects

use Project

class CobraLanguageBinding implements IDotNetLanguageBinding
	"""
	This class provides core functionality for compiling Cobra source code
	and projects to generate an assembly file.
	"""

	test
		binding = CobraLanguageBinding()
		assert binding.language == "Cobra"
		assert binding.singleLineCommentTag == "#"
		assert binding.blockCommentStartTag == "/#"
		assert binding.blockCommentEndTag == "#/"
		assert binding.projectStockIcon == "md-project" #TODO: create a custom icon
		assert ClrVersion.Net_2_0 not in binding.getSupportedClrVersions
		assert ClrVersion.Net_4_0 in binding.getSupportedClrVersions
		assert ClrVersion.Net_4_5 in binding.getSupportedClrVersions
		assert binding.getFileName("test") == "test.cobra"
		assert binding.isSourceCodeFile(FilePath("test.cobra"))
		assert not binding.isSourceCodeFile(FilePath("test.cs"))
	
	var supportedClrVersions as ClrVersion[] = @[ ClrVersion.Net_4_0, ClrVersion.Net_4_5 ]
		is shared, readonly
	
	const languageName = "Cobra"
	const sourceFileExtension = ".cobra"
		
	class AddOnKeys
		"""
		Cobra syntax nodes have a general purpose dictionary for storing
		arbitrary values on them.  This class contains the keys the various
		classes in this project use to store and retrieve information to
		and from this dictionary.
		"""
		cue init is private
			base.init
	
		const globalNameSpace = "MonoDevelop.CobraBinding.AddOnKeys.globalNameSpace"
		
	var _targetArgs as Dictionary<of CompileTarget, String>
	
	cue init
		base.init
		_targetArgs = {
			CompileTarget.Exe : " -target:exe",
			CompileTarget.Library : " -target:lib",
			CompileTarget.WinExe : " -target:winexe",
			CompileTarget.Module : " -target:module"
		}
	
	get language as String
		return CobraLanguageBinding.languageName
		
	get singleLineCommentTag as String
		return "#"
		
	get blockCommentStartTag as String
		return "/#"
		
	get blockCommentEndTag as String
		return "#/"
	
	get projectStockIcon as String
		return "md-project"
		
	def getSupportedClrVersions as ClrVersion[]
		return CobraLanguageBinding.supportedClrVersions
					
	def getFileName(fileNameWithoutExtension as FilePath) as FilePath
		return fileNameWithoutExtension.changeExtension(CobraLanguageBinding.sourceFileExtension)
		
	def getFileName(fileNameWithoutExtension as String) as String
		return .getFileName(FilePath(fileNameWithoutExtension)).toString
		
	def isSourceCodeFile(fileName as FilePath) as bool
		return fileName.extension == CobraLanguageBinding.sourceFileExtension
		
	def compile(
			items as ProjectItemCollection,
			configuration as DotNetProjectConfiguration,
			configSelector as ConfigurationSelector,
			monitor as IProgressMonitor
		) as BuildResult
		"""
		Attempts to compile the given project items using the provided project
		configuration to produce as assembly file.
		
		Returns a BuildResult instance that contains compilation errors if any occurred.
		"""
		cobraCmd = CobraCommand.find
		if cobraCmd == nil
			errMsg = "Could not find cobra command. Try adding its location to your PATH environment variable."
			monitor.reportError(errMsg, nil)
			failedResult = BuildResult()
			failedResult.addError(errMsg)
			return failedResult
		
		argsBuilder = StringBuilder("-compile")
		
		# references (add each one only once)
		refs = HashSet<of String>()
		pkgs = HashSet<of String>()
		
		libPaths = List<of String>()
		sysAsmService = MonoDevelop.Core.Runtime.systemAssemblyService
		runTime as Assemblies.TargetRuntime = sysAsmService.defaultRuntime to !
		if configuration.parentItem <> nil
			proj = configuration.parentItem to !
			runTime = proj.targetRuntime to !
		
		for projRef in items.getAll<of ProjectReference>
			if projRef.referenceType <> ReferenceType.Package
				# this is either a direct assembly reference or a project reference
				for fileName in projRef.getReferencedFileNames(configSelector)
					if refs.add(fileName), argsBuilder.append(' -ref:"[fileName]"')
			else
				pkg = projRef.package
				if CobraCore.isRunningOnUnix
					# when not on Windows, we can use the -pkg option directly
					if pkgs.add(pkg.name), argsBuilder.append(' -pkg:"[pkg.name]"')
				else
					# The '-pkg' option isn't available on Windows. We need to explicitly
					# specify all the referenced assemblies and their dependencies.
					for fileName in projRef.getReferencedFileNames(configSelector)
						if refs.add(fileName), argsBuilder.append(' -ref:"[fileName]"')
					
					if pkg.gacRoot and not libPaths.contains(pkg.gacRoot)
						libPaths.add(pkg.gacRoot)
					
					if pkg.requires
						for requiredPkg in pkg.requires.split(' ')
							rpkg = runTime.assemblyContext.getPackage(requiredPkg)
							if rpkg == nil, continue
							for asm in rpkg.assemblies
								if refs.add(asm.location), argsBuilder.append(' -ref:"[asm.location]"')
		
		for libPath in libPaths
			argsBuilder.append(' -lib:"[libPath]"')
		
		# what kind of assembly will we generate?
		argsBuilder.append(_targetArgs[configuration.compileTarget])
		
		# are we targetting a specific platform?
		if configuration.platform <> nil and configuration.platform.length > 0
			argsBuilder.append(" -clr-platform:[configuration.platform]")
		
		# a project always exists in memory, but not on disk for single files
		if File.exists(proj.fileName.toString)
			# use the project directory as the working directory
			workingDir = configuration.parentItem.baseDirectory.toString
		else
			/#
			This is a fake project. We get this when a user directly opens a
			source file without creating a project/solution. We'll use the
			location of the single source file as the working directory.
			#/
			standAloneFile = items[0] to IFileItem
			workingDir = standAloneFile.fileName.parentDirectory.toString
		
		# is there a root namespace we should apply?
		rootNamespace = proj.defaultNamespace ? ""
		rootNamespace = rootNamespace.trim
		if rootNamespace.length <> 0, argsBuilder.append(' -namespace:[rootNamespace]')
		
		# what is the real type for 'number'?
		compilerParams = configuration.compilationParameters to CobraCompilerParameters
		argsBuilder.append(' -number:[compilerParams.number]')
		
		# what will we call the generated assembly?
		asmName = configuration.compiledOutputName
		argsBuilder.append(' -out:"[asmName.fullPath]"')
		
		# which files should we compile and which ones should we embed as resources?
		toCompile = StringBuilder()
		
		for projFile in items.getAll<of ProjectFile>
			
			# workaround an issue where directories are sometimes included with project files
			if Directory.exists(projFile.name), continue
			
			branch projFile.buildAction
				on BuildAction.compile
					toCompile.append(' "[projFile.name]"')
				on BuildAction.embeddedResource
					resourceFileName = '\\"[projFile.name]\\"'
					resourceId = '\\"[projFile.resourceId]\\"'
					argsBuilder.append(' -native-compiler-arg:"-res:[resourceFileName],[resourceId]"')
		
		# add the user specified compiler parameters for this configuration
		argsBuilder.append(compilerParams.createCmdLineArgs)
		
		# add the list of files to compile
		argsBuilder.append(toCompile.toString)
		
		compilerArgs = argsBuilder.toString
		
		monitor.log.writeLine("Working directory: " + workingDir)
		# TODO: This creates one giant long string that requires horiztonal scrolling,
		# it should wrap or logically group the arguments instead
		monitor.log.writeLine(cobraCmd.path + " " + compilerArgs)
		
		# compile the code
		output = _spawnCobraCompilerProcess(cobraCmd.path, compilerArgs, workingDir)
		
		# parse the compiler output
		lines = List<of String>()
		
		stdErr = output.errorOutput
		if stdErr.length, monitor.reportError(stdErr, nil)
		lines.addRange(stdErr.split('\n'))
		
		stdOut = output.standardOutput
		if stdOut.length, monitor.log.writeLine(stdOut)
		lines.addRange(stdOut.split('\n'))
		
		buildResult = _parseCompilerOutput(lines)
		buildResult.compilerOutput = stdOut
		
		return buildResult
	
	def _spawnCobraCompilerProcess(cobraExe as String, cobraArgs as String, workingDir as String) as ProcessOutput
		"""
		Executes the Cobra compiler and returns an object containing the data
		from the standard and error output streams.
		"""
		require
			cobraExe.length > 0
			workingDir.length > 0
		test
			binding = CobraLanguageBinding()
			
			expect Exception
				binding._spawnCobraCompilerProcess("", "", "")
			cobraExe = CobraCore.findCobraExe to !
			output = binding._spawnCobraCompilerProcess(cobraExe, "-version", ".")
			assert output.combinedOutput.startsWith("Cobra ")
			
			output = binding._spawnCobraCompilerProcess(cobraExe, "", ".")
			stdOut = output.standardOutput
			assert stdOut.contains("The Cobra Programming Language")
			assert stdOut.contains("Usage:")
			assert stdOut.contains("cobra -h")
		body
			proc = System.Diagnostics.Process()
			
			proc.startInfo.fileName = cobraExe
			proc.startInfo.arguments = cobraArgs
			proc.startInfo.workingDirectory = workingDir
			
			return proc.runAndCaptureOutput
	
	/#
	regex testing: http://regexhero.net/tester/
	or in MonoDevelop go to: Tools > Regex Toolkit...
	#/
	shared, readonly
		var compilerOutputRegex = Regex( _
			r"(?<fileName>[^\(]+)\((?<lineNum>\d+)(,(?<col>\d+))?\):(\s)+(?<msgType>error|warning)(\s)*:(\s)*(?<msg>[^\r]+)", _
			RegexOptions.Compiled)

	def _parseCompilerOutput(compilerOutput as List<of String>) as BuildResult
		"""
		Parses the error and warning messages generated by the Cobra compiler and turns
		them into objects MonoDevelop can understand.
		"""
		test successfulCompilation
			sampleOutput = ['Compilation succeeded']
			
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 0
			assert res.errorCount == 0
			assert res.warningCount == 0
		
		test successWithWarnings
			sampleOutput = [
				'someFile.cobra(24): warning: Unnecessary parentheses. You can remove them.',
				'someFile.cobra(51): warning: The value of variable "someVar" is never used.',
				'Compilation succeeded - 2 warnings'
			]
			
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 2
			assert res.errorCount == 0
			assert res.warningCount == 2
			lineSum = 0
			for w in res.errors
				assert w.isWarning
				assert w.fileName == "someFile.cobra"
				lineSum += w.line
				assert w.column == 0
				assert w.errorText == "Unnecessary parentheses. You can remove them." _
					or w.errorText == 'The value of variable "someVar" is never used.'
			assert lineSum == 75
			
		test lineColumnInfo
			sampleOutput = [
				'foo.cobra(4): error: Cannot find "b". There is a member named ".memberwiseClone" with a similar name.',
				'foo.cobra(4): warning: The value of variable "a" is never used.',
				'foo.cobra(4,15): error: Expecting an expression.'
			]
			
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 3
			assert res.errorCount == 2
			assert res.warningCount == 1
			for e in res.errors
				assert e.fileName == "foo.cobra"
				assert e.line == 4
				try
					assert e.column == 0
					if e.isWarning
						assert e.errorText == 'The value of variable "a" is never used.'
					else
						assert e.errorText == 'Cannot find "b". There is a member named ".memberwiseClone" with a similar name.'
				catch
					assert e.column == 15
					assert e.errorText == "Expecting an expression."
		
		test generalError
			sampleOutput = [
				'error: Cannot find a "main" method.',
				'Compilation failed - 1 error, 0 warnings',
				'Not running due to errors above.'
			]
			
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 1
			assert res.errorCount == 1
			assert res.warningCount == 0
			e = res.errors[0]
			assert not e.isWarning
			assert e.fileName == nil
			assert e.line == 0
			assert e.column == 0
			assert e.errorText == sampleOutput.first
		
		test internalError
			sampleOutput = [
				'error: COBRA INTERNAL ERROR / InvalidCastException / Cannot cast from source type to destination type.',
				'Compilation failed - 1 error, 0 warnings'
			]
			res = CobraLanguageBinding()._parseCompilerOutput(sampleOutput)
			assert res.errors.count == 1
			assert res.errorCount == 1
			assert res.warningCount == 0
			e = res.errors[0]
			assert not e.isWarning
			assert e.fileName == nil
			assert e.line == 0
			assert e.column == 0
			assert e.errorText == sampleOutput.first
		
		body
			buildResult = BuildResult()
			
			for line in compilerOutput
				match = CobraLanguageBinding.compilerOutputRegex.match(line)
				if match.success
					groups = match.groups
					fileName = groups["fileName"].toString
					if "Skipping duplicate message:" in fileName, continue

					lineNum = int.parse(groups["lineNum"].toString)
					col = 0
					if not int.tryParse(groups["col"].toString, out col)
						col = 0
					msgType = groups["msgType"].toString
					msg = groups["msg"].toString
					errNum = ""

					if msgType == "error"
						buildResult.addError(fileName, lineNum, col, errNum, msg)
					else
						buildResult.addWarning(fileName, lineNum, col, errNum, msg)

				else if "error:" in line or "error :" in line
					buildResult.addError(line)
				else if "warning:" in line or "warning :" in line
					buildResult.addWarning(line)

			return buildResult

	def createCompilationParameters(projectOptions as XmlElement?) as ConfigurationParameters
		test
			binding = CobraLanguageBinding()
			compilerParams = binding.createCompilationParameters(nil)
			assert compilerParams.getType == CobraCompilerParameters
			assert (compilerParams to CobraCompilerParameters).performanceQualityOption == _
					CobraCompilerParameters.PerfQualOption.Default
		body
			return CobraCompilerParameters()
		
	def createProjectParameters(projectOptions as XmlElement?) as ProjectParameters
		return ProjectParameters()
	
	#TODO
	def getCodeDomProvider as CodeDomProvider?
		return nil
