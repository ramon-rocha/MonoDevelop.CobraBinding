<SyntaxMode name="Cobra" mimeTypes="text/x-cobra;text/x-plain">

	<Property name="LineComment">#</Property>
	<Property name="BlockCommentStart">/#</Property>
	<Property name="BlockCommentEnd">#/</Property>
	<Property name="StringQuote">"</Property>
	<Property name="StringQuote">'</Property>

	<!-- Comments and doc strings -->
	<Rule name="Comment">
		<Keywords color="Comment Tag" ignorecase="True">
			<Word>TODO</Word>
			<Word>to-do</Word>
			<Word>FIXME</Word>
			<Word>HACK</Word>
		</Keywords>
	</Rule>
	
	<EolSpan color="Comment(Line)" rule="Comment">#</EolSpan>
	
	<Span color="Comment(Block)" rule="Comment">
		<Begin>/#</Begin>
		<End>#/</End>
	</Span>
	
	<Span color="Comment(Doc)" rule="Comment">
		<Begin>"""</Begin>
		<End>"""</End>
	</Span>

	<Span color="Comment(Doc)" rule="Comment">
		<Begin>'''</Begin>
		<End>'''</End>
	</Span>
	
	<!-- Character Literals -->
	<Span color="String">
		<Begin>c'</Begin>
		<End>'</End>
	</Span>
	
	<Span color="String">
		<Begin>c"</Begin>
		<End>"</End>
	</Span>
	
	<!-- Non-substituted Strings -->
	<Span color="String" escape="\'|\\">
		<Begin>ns'</Begin>
		<End>'</End>
	</Span>
	
	<Span color="String" escape='\"|\\'>
		<Begin>ns"</Begin>
		<End>"</End>
	</Span>
	
	<!-- Raw Strings -->
	<Span color="String">
		<Begin>r'</Begin>
		<End>'</End>
	</Span>
	
	<Span color="String">
		<Begin>r"</Begin>
		<End>"</End>
	</Span>
	
	<!-- Bracketed Expression in String -->
	<Rule name="StringExpr">
		<Span color="Keyword(Parameter)" tagColor="Punctuation">
			<Begin>[</Begin>
			<End>]</End>
		</Span>
	</Rule>
	
	<!-- Normal Strings -->
	<Span color="String" rule="StringExpr" escape='\"|\\'>
		<Begin>"</Begin>
		<End>"</End>
	</Span>
	
	<Span color="String" rule="StringExpr" escape="\'|\\">
		<Begin>'</Begin>
		<End>'</End>
	</Span>
	
	<!-- Numbers -->
	<Match color="Number">(?:[0-9]+_?)+(?:\.[0-9]+)?</Match>

	<!-- Generics -->
	<Rule name="Generic">
		<Span color="Keyword(Type)" tagColor="Keyword(Selection)" rule="Generic">
			<Begin>&lt;of </Begin>
			<End>&gt;</End>
		</Span>
	</Rule>
	
	<Span color="Keyword(Type)" tagColor="Keyword(Selection)" rule="Generic">
		<Begin>&lt;of </Begin>
		<End>&gt;</End>
	</Span>
	
	<!-- Keywords -->
	<Keywords color="Keyword(Namespace)">
		<Word>namespace</Word>
		<Word>use</Word>
		<Word>import</Word>
	</Keywords>
	
	<Keywords color="Keyword(Declaration)">
		<Word>enum</Word>
		<Word>class</Word>
		<Word>interface</Word>
		<Word>mixin</Word>
		<Word>adds</Word>
		<Word>struct</Word>
		<Word>extend</Word>
		<Word>def</Word>
		<Word>sig</Word>
		<Word>as</Word>
		<Word>cue</Word>
		<Word>var</Word>
		<Word>const</Word>
		<Word>has</Word>
		<Word>event</Word>
	</Keywords>

	<Keywords color="Keyword(Property)">
		<Word>get</Word>
		<Word>set</Word>
		<Word>pro</Word>
	</Keywords>

	<Keywords color="Keyword(Modifiers)">
		<Word>public</Word>
		<Word>protected</Word>
		<Word>private</Word>
		<Word>internal</Word>

		<Word>partial</Word>
		<Word>virtual</Word>
		<Word>nonvirtual</Word>
		<Word>override</Word>
		<Word>new</Word>

		<Word>shared</Word>
		<Word>readonly</Word>
		<Word>abstract</Word>
		<Word>extern</Word>
	</Keywords>

	<Keywords color="Keyword(Context)">
		<Word>invariant</Word>
		<Word>require</Word>
		<Word>ensure</Word>
		<Word>test</Word>
		<Word>body</Word>
		<Word>using</Word>
		<Word>lock</Word>
	</Keywords>

	<Keywords color="Keyword(Exception)">
		<Word>try</Word>
		<Word>catch</Word>
		<Word>success</Word>
		<Word>finally</Word>
		<Word>throw</Word>

		<Word>assert</Word>
		<Word>trace</Word>
		<Word>expect</Word>
		<Word>implies</Word>
	</Keywords>

	<Keywords color="Keyword(Selection)">
		<Word>if</Word>
		<Word>else</Word>
		<Word>branch</Word>
		<Word>where</Word>
		<Word>from</Word>
	</Keywords>

	<Keywords color="Keyword(Iteration)">
		<Word>while</Word>
		<Word>post</Word>
		<Word>for</Word>
	</Keywords>

	<Keywords color="Keyword(Jump)">
		<Word>break</Word>
		<Word>continue</Word>
		<Word>return</Word>
		<Word>yield</Word>
	</Keywords>

	<Keywords color="Keyword(Constants)">
		<Word>true</Word>
		<Word>false</Word>
		<Word>nil</Word>
	</Keywords>

	<Keywords color="Keyword(Access)">
		<Word>base</Word>
		<Word>this</Word>
		<Word>result</Word>
		<Word>old</Word>
		<Word>value</Word>
	</Keywords>

	<Keywords color="Keyword(Operator)">
		<Word>inherits</Word>
		<Word>implements</Word>
		<Word>is</Word>
		<Word>to</Word>
		<Word>and</Word>
		<Word>or</Word>
		<Word>not</Word>
		<Word>any</Word>
		<Word>every</Word>
		<Word>all</Word>
		<Word>each</Word>
		<Word>in</Word>
	</Keywords>

	<Keywords color="Keyword(Type)">
		<Word>bool</Word>
		<Word>char</Word>
		<Word>int</Word>
		<Word>int8</Word>
		<Word>int16</Word>
		<Word>int32</Word>
		<Word>int64</Word>
		<Word>uint</Word>
		<Word>uint8</Word>
		<Word>uint16</Word>
		<Word>uint32</Word>
		<Word>uint64</Word>
		<Word>decimal</Word>
		<Word>float</Word>
		<Word>float32</Word>
		<Word>float64</Word>
		<Word>dynamic</Word>
		<Word>same</Word>
		<Word>number</Word>
		<Word>passthrough</Word>
	</Keywords>

	<Keywords color="Keyword(Parameter)">
		<Word>vari</Word>
		<Word>out</Word>
		<Word>inout</Word>
	</Keywords>

	<Keywords color="Keyword(Other)">
		<Word>init</Word>
		<Word>must</Word>
		<Word>be</Word>
		<Word>callable</Word>
		<Word>of</Word>
		<Word>on</Word>
		<Word>off</Word>
		<Word>pass</Word>
		<Word>print</Word>
		<Word>ref</Word>
		<Word>stop</Word>
		<Word>listen</Word>
		<Word>ignore</Word>
		<Word>raise</Word>
		<Word>end</Word>
		<Word>do</Word>
		<Word>par</Word>
		<Word>objc</Word>
		<Word>except</Word>
	</Keywords>

</SyntaxMode>
