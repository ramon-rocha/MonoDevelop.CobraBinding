use Cobra.Compiler

extend CobraModule

	def getDefaultNamespace as NameSpace
		"""
		If the -namespace option was used, then returns the node for that
		namespace.  Otherwise, the non-unified global namespace is returned.
		"""
		if .topNameSpace.isWrappingDefaultNamespace
			return .topNameSpace.wrappedNamespace
		return .topNameSpace

	def getGlobalNamespace as NameSpace
		ns = .topNameSpace
		key = CobraLanguageBinding.AddOnKeys.globalNameSpace
		if ns.addOnValues.containsKey(key)
			return ns.addOnValues[key] to NameSpace
		return ns.unifiedNameSpace ? ns


extend NameSpace
	
	def isWrappingDefaultNamespace as bool
		"""
		When the -namespace option is passed to the compiler, the current
		module's toplevelNamespace is wrapped with a new namespace node.

		This extension method returns true if this node is wrapping the
		default namespace node.
		"""
		if .fullName <> "global"
			return false
		
		# if the only decl we have is a NameSpace with an empty token, then we are a wrapper
		if .declsInOrder.count <> 1
			return false
		
		decl = .declsInOrder.first
		return decl inherits NameSpace and decl.token.isEmpty
	
	
	def wrappedNamespace as NameSpace
		require .isWrappingDefaultNamespace
		return .declsInOrder.first to NameSpace

extend Box
	
	def tryAllMembers as IList<of IBoxMember>
		"""
		A helper method to work around race conditions that can occur when calling .allMembers
		"""
		try
			if not .didBindImp
				.bindAll
			return .allMembers
		catch
			return .declsInOrder

class CompilerManager
	"""
	This class provides serial access to the Cobra compiler. If multiple
	threads attempt to invoke conflicting methods, the thread will be
	blocked until the compiler is available.  This class utilizes a single
	lock to avoid deadlocks for conflicting resources.
	"""
	test
		cm1 = CompilerManager.instance
		cm2 = CompilerManager.instance
		assert cm1 is cm2

	class CustomBindImplementationPhase inherits BindImplementationPhase is protected
		"""
		Bind the AST nodes inside methods and properties but only for a single file.
		"""
		var _fileName as String
		
		cue init(c as Compiler, fileToBind as String)
			base.init(c)
			_fileName = fileToBind
		
		get description as String is override
			return 'Binding implementation for [_fileName]'
		
		def innerRun is override
			c = .compiler
			for mod in c.modules.clone
				if mod.fileName == _fileName
					c.curModule = mod
					try
						mod.bindImp
					catch ce as SourceException
						c.recordError(ce)
					break
			
			# this addOnValue will be used in CobraModuleVisitor when creating the symbol table
			boundAst = mod to CobraModule
			key = CobraLanguageBinding.AddOnKeys.globalNameSpace
			boundAst.topNameSpace.addOnValues[key] = c.globalNS

	
	shared
		var _instance as CompilerManager? = nil
	
		get instance as CompilerManager
			if _instance == nil
				_instance = CompilerManager()
			return _instance to !
			
		# only the thread holding the conch can use the compiler
		var _theConch = Object()
		
		# the compiler phases we want to run for all files
		var _phaseTypes = @[
			BindRunTimeLibraryPhase,
			ReadLibrariesPhase,
			ParsePhase,
			BindUsePhase,
			BindInheritancePhase,
			BindInterfacePhase,
			BindMixinsPhase,
			ComputeMatchingBaseMembersPhase,
		] # .CustomBindImplementationPhase gets added manually later

	# Callers have to use CompilerManager.instance instead
	cue init is protected
		base.init
	
	
	def __createCompiler as Compiler
		"""
		Returns a fresh instance of the compiler.
		
		Should only be called if we have _theConch.
		"""
		compiler = Compiler(0) # verbosity = 0
		
		options = OptionValues()
		options['compile'] = true
		options['back-end'] = 'clr'
		options['contracts'] = 'inline'
		options['include-asserts'] = false
		options['include-tests'] = true
		options['include-traces'] = false
		
		compiler.options = options
		compiler.initBackEnd
		
		# Set some shared information which gets reset everytime we instantiate a compiler.
		Node.setCompiler(compiler)
		Node.typeProvider = compiler
		
		return compiler
	
	def parseAndBind(
			project as MonoDevelop.Projects.DotNetProject,
			fileName as String,
			source as String
		) as TypeSystem.ParsedCobraDocument
		"""
		Runs select phases of the Cobra compiler on the files in the given project.

		'fileName' is the name of the file to bind and 'source' is the source code contained in that file.
		"""
		sourceMap = Dictionary<of String, String>(project.files.count)
		sourceMap[fileName] = source

		# we need to include the paths to any referenced assemblies
		configSelector = MonoDevelop.Ide.IdeApp.workspace.activeConfiguration
		config = project.getConfiguration(configSelector) to MonoDevelop.Projects.DotNetProjectConfiguration?
		if config == nil
			configSelector = MonoDevelop.Projects.ConfigurationSelector.default
			config = project.defaultConfiguration to MonoDevelop.Projects.DotNetProjectConfiguration?
		
		refs = List<of String>(project.references.count)
		for projRef in project.references
			refs.addRange(projRef.getReferencedFileNames(configSelector))
		
		# to generate a full AST, we need all the Cobra source files in this project
		for projFile in project.files
			
			if projFile.buildAction <> MonoDevelop.Projects.BuildAction.compile, continue
			
			path = projFile.filePath.toString
			if path == fileName _
			or not path.endsWith(CobraLanguageBinding.sourceFileExtension), continue

			doc = MonoDevelop.Ide.IdeApp.workbench.getDocument(path)
			if doc == nil
			    # file is not open, read it from disk
				sourceMap[path] = StreamReader(path).readToEnd ? ""
			else
			    # file is open in editor, read it from memory
				sourceMap[path] = doc.editor.text ? ""
		
		numberOption = "decimal"
		if config <> nil
			params = config.compilationParameters to Project.CobraCompilerParameters
			numberOption = params.number
		
		return _parseAndBind(sourceMap, refs, fileName, project.defaultNamespace, numberOption)
	

	def parseAndBind(
			sourceMap as Dictionary<of String, String>,
			fileToBind as String
		) as TypeSystem.ParsedCobraDocument
		"""
		Runs select phases of the Cobra compiler.
		
		The sourceMap is a dictionary whose values are source file contents keyed
		by filename.
		"""
		return _parseAndBind(sourceMap, List<of String>(), fileToBind)
	

	def parseAndBind(sourceMap as Dictionary<of String, String>) as TypeSystem.ParsedCobraDocument
		"""
		Runs select phases of the Cobra compiler.
		
		The sourceMap is a dictionary whose values are source file contents keyed
		by filename.
		"""
		return .parseAndBind(sourceMap, sourceMap.first.key)
	
	def parseAndBind(
			rootNamespace as String?,
			sourceMap as Dictionary<of String, String>
		) as TypeSystem.ParsedCobraDocument
		"""
		This overload is for supporting test methods
		"""
		return _parseAndBind(sourceMap, List<of String>(), sourceMap.keys.first, rootNamespace)
	
	def _parseAndBind(
			sourceMap as Dictionary<of String, String>,
			refs as List<of String>,
			fileToBind as String,
			rootNamespace as String? = nil,
			numberOption as String = "decimal"
		) as TypeSystem.ParsedCobraDocument
		"""
		Runs select phases of the Cobra compiler.
		
		The sourceMap is a dictionary whose values are source file contents keyed
		by filename.
		"""
		test validFiles
			# Valid files produce fully bound ASTs without any errors.
			
			cm = CompilerManager.instance
			testData = .readTestData("no_errors")
			astCount = 0
			refs = List<of String>()

			for filePath, code in testData
				# process each file individually
				doc = cm._parseAndBind({filePath: code}, refs, filePath)
				assert doc.errors.count == 0
				
				# validate the AST
				ast = doc.getAst<of CobraModule>
				astCount += 1
				
				assert ast.didBindImp
				key = CobraLanguageBinding.AddOnKeys.globalNameSpace
				assert ast.topNameSpace.addOnValues.containsKey(key)
				
				sysNamespace = ast.getGlobalNamespace.memberForName("System") to NameSpace
				ioNamespace = sysNamespace.memberForName("IO") to NameSpace
				fileClass = ioNamespace.memberForName("File") to Class
				assert fileClass.tryAllMembers.count > 0
				
				name =  FileInfo(filePath).name
				branch name
					on "Point.cobra"
						pointClass = ast.topNameSpace.memberForName("Point") to Class
						assert pointClass.memberForName("toString")
						assert pointClass.memberForName("getHashCode")
						assert pointClass.name == "Point"
						assert pointClass.typeForReceiver is pointClass
						assert pointClass.testMethods.count == 1
						p = pointClass.memberForName("x")
						assert p.getType == Property
						assert p.typeForReceiver inherits IntType
						m = pointClass.memberForName("movedBy")
						assert m.getType == Method
						assert m.typeForReceiver is pointClass

					on "Shapes.cobra"
						assert ast.topNameSpace.memberForName("Shape")
						assert ast.topNameSpace.memberForName("Rectangle")
						assert ast.topNameSpace.memberForName("Circle")
						assert ast.topNameSpace.memberForName("Program")

					on "FractalBenchmark.cobra"
						prog = ast.topNameSpace.memberForName("Program") to Class
						assert prog.memberForName("bailOut")
						assert prog.memberForName("maxIterations")
						assert prog.memberForName("mandelbrot")
						assert prog.memberForName("calc")
						assert prog.memberForName("main")
						
					else
						# ignore other test files
						pass
			
			assert testData.count == astCount
				
		test parseErrors
			# Files with parse errors do not provide an AST.
			
			cm = CompilerManager.instance
			testData = .readTestData("parser_errors")
			errorCount = 0
			refs = List<of String>()

			for filePath, code in testData
				# process each file individually
				doc = cm._parseAndBind({filePath: code}, refs, filePath)
				assert doc.ast == nil
				name =  FileInfo(filePath).name
				assert doc.errors.count == 1
				err = doc.errors[0]
				errorCount += 1
				branch name
					on "ExpectingEol.cobra"
						assert err.region.beginLine == 3
						assert err.region.beginColumn == 0
						assert err.message == 'Expecting EOL, but got "var" instead.'

					on "ExpectingExpression.cobra"
						assert err.region.beginLine == 5
						assert err.region.beginColumn == 11
						assert err.message == "Expecting an expression."

					on "ExpectingIndent.cobra"
						assert err.region.beginLine == 3
						assert err.region.beginColumn == 14
						assert err.message == 'Expecting INDENT, but got "DEDENT" instead.'
						
					on "MissingMethodBody.cobra"
						assert err.region.beginLine == 2
						assert err.region.beginColumn == 15
						assert err.message == 'Missing method body for "someMethod".'
						
					on "UnexpectedIndent.cobra"
						assert err.region.beginLine == 2
						assert err.region.beginColumn == 0
						assert err.message == 'Unexpected indent.'
						
					on "MixedTabsAndSpaces.cobra"
						assert err.region.beginLine == 2
						assert err.region.beginColumn == 0
						assert err.message == ns'Cannot mix tabs and spaces in indentation. [TAB][SPACE][SPACE][SPACE][SPACE]...'

					else
						# unhandled file, a case should be added for it
						print "******* You need to add a test case for [name]!"
						assert false

			assert testData.count == errorCount

		test bindErrors
			# Files with binding errors still provide an AST.
			
			cm = CompilerManager.instance
			testData = .readTestData("binding_errors")
			astCount = errorCount = 0
			refs = List<of String>()

			for filePath, code in testData
				# process each file individually
				doc = cm._parseAndBind({filePath: code}, refs, filePath)
				ast = doc.getAst<of CobraModule>
				astCount += 1
				name = FileInfo(ast.fileName).name
				assert doc.errors.count >= 1
				err = doc.errors[0]
				errorCount += 1
				branch name
					on "CannotFindType.cobra"
						assert err.region.beginLine == 3
						assert err.region.beginColumn == 8
						assert err.message == 'Cannot find "Fake".'
						
						c = ast.topNameSpace.memberForName("CannotFindType") to Class
						assert c.memberForName("method")
						
					on "NilError.cobra"
						assert err.region.beginLine == 5
						assert err.region.beginColumn == 2
						assert err.message == 'Cannot return String? because "method" is declared to return a String.'
						
						c = ast.topNameSpace.memberForName("NilError") to Class
						assert c.memberForName("a")
						assert c.memberForName("method")
						
					on "TypeMismatch.cobra"
						assert err.region.beginLine == 4
						assert err.region.beginColumn == 14
						assert err.message == 'Incompatible types. Cannot assign value of type int on the right to String on the left.'

						c = ast.topNameSpace.memberForName("TypeMismatch") to Class
						assert c.memberForName("method")
					
					on "CyclicalInheritance1.cobra"
						assert err.region.beginLine == 15
						assert err.region.beginColumn == 0
						assert err.message == 'Cyclical inheritance for "C" with ancestor types A, B and back to C.'
						
						c = ast.topNameSpace.memberForName("A") to Class
						assert c.baseClass is ast.topNameSpace.memberForName("B")
						assert not c.didBindInh
						assert c.allMembers.count
						assert c.memberForName('x')
						
						c = ast.topNameSpace.memberForName("B") to Class
						assert c.baseClass is ast.topNameSpace.memberForName("C")
						assert not c.didBindInh
						assert c.allMembers.count
						assert c.memberForName('y')
						
						c = ast.topNameSpace.memberForName("C") to Class
						assert c.baseClass == nil
						assert not c.didBindInh
						assert c.allMembers.count
						assert c.memberForName('z')
					
					on "CyclicalInheritance2.cobra"
						assert doc.errors.count == 2
						assert doc.errors[0].region.beginLine == 12
						assert doc.errors[0].region.beginColumn == 0
						assert doc.errors[0].message == 'Cyclical inheritance for "IFooBar" with ancestor types IFoo and back to IFooBar.'
						assert doc.errors[1].region.beginLine == 9
						assert doc.errors[1].region.beginColumn == 0
						assert doc.errors[1].message == 'Cyclical inheritance for "IBar" with ancestor types IFoo, IFooBar and back to IBar.'
						
						i = ast.topNameSpace.memberForName("IFoo") to Interface
						assert i.baseInterfaces.count == 1
						assert i.baseInterfaces[0] is ast.topNameSpace.memberForName("IFooBar")
						assert i.allMembers.count
						assert i.memberForName('f')
						
						i = ast.topNameSpace.memberForName("IBar") to Interface
						assert i.baseInterfaces.count == 0
						assert i.allMembers.count
						assert i.memberForName('b')
						
						i = ast.topNameSpace.memberForName("IFooBar") to Interface
						assert i.baseInterfaces.count == 1
						assert i.baseInterfaces[0] is ast.topNameSpace.memberForName("IBar")
						assert i.allMembers.count
						assert i.memberForName('b')
						
						c = ast.topNameSpace.memberForName("FooBar") to Class
						assert c.didBindInh
						assert c.baseInterfaces.count == 1
						assert c.baseInterfaces[0] is i
						assert c.allMembers.count
						assert c.memberForName('toString')
					
					else
						# unhandled file, a case should be added for it
						print "******* You need to add a test case for [name]!"
						assert false
					
			assert testData.count == astCount
			assert errorCount >= testData.count
		
		body
			if sourceMap.count == 0
				# nothing to do
				return TypeSystem.ParsedCobraDocument(fileToBind, "")
				
			params = CompileParams()
			for fileName, sourceCode in sourceMap
				params.files.add(FileSpec(fileName, sourceCode))
			
			lock _theConch
				compiler = __createCompiler
				compiler.options['reference'] = refs
				compiler.options['number'] = numberOption
				if rootNamespace <> nil
					rootNamespace = rootNamespace.trim
					if rootNamespace.length <> 0, compiler.options['namespace'] = rootNamespace
				
				for phaseType in _phaseTypes
					params.phases.add(phaseType(compiler))
				params.phases.add(.CustomBindImplementationPhase(compiler, fileToBind))
				
				try
					compiler.compile(params)
				catch StopCompilation
					# source files with errors will throw these
					# but we just ignore them
					pass
				catch ex as Exception
					print "The compiler crashed trying to compile [fileToBind]"
					trace ex
				
				doc = TypeSystem.ParsedCobraDocument(fileToBind, sourceMap[fileToBind])
				if compiler.errors.count <> 0
					# try to copy the errors to a new list so concurrent operations that don't lock _theConch
					# (like calls to .bindImp) don't modify the list while we iterate over it in doc.add
					errors = compiler.errors.toArray to !
					doc.add(errors)
	
				for module in compiler.modules
					if module.fileName == fileToBind
						doc.add(module to CobraModule)
				
			return doc


	shared
		def readTestData(folder as String) as Dictionary<of String, String>
			"""
			This function is only for supporting test methods.  The 'folder'
			parameter should exist under '../../test_data' which is relative
			to the location of the 'scripts/refs' path under 'CobraBinding'.
			"""
			s = Path.directorySeparatorChar
			testDir = "..[s]..[s]test_data[s][folder]"
			assert Directory.exists(testDir)

			sourceMap = Dictionary<of String, String>()

			files = Directory.getFiles(testDir)
			for filePath in files
				reader = StreamReader(filePath)
				code = reader.readToEnd ? ""

				sourceMap[filePath] = code

			return sourceMap
