use Cobra.Compiler

use MonoDevelop.Ide.CodeCompletion

use ICSharpCode.NRefactory.Completion

namespace Completion

class BoxMembersList inherits CobraCompletionList
	"""
	This class is a completion data list whose entries are the members of the given Box.
	"""
	
	test
		ast = CobraCompletionTextEditorExtension.createTestData
		ns1 = ast.topNameSpace.memberForName("TopLevelNameSpace") to NameSpace
		ns2 = ns1.memberForName("SecondLevelNameSpace") to NameSpace
		ns3 = ns2.memberForName("ThirdLevelNameSpace")to NameSpace
		f = ns3.memberForName("First") to Class
		
		data = BoxMembersList(f)
		assert data.box is f
		assert data.count >= 33 and data.count <= f.allMembers.count
		
		filteredData = BoxMembersList(f, do(m as IBoxMember) = "public" in m.isNames)
		assert filteredData.box is f
		assert filteredData.count >= 17
		assert filteredData.count < data.count
	
	# Used to only include some Box members such as "only public" or "only shared".
	sig MemberFilter(m as IBoxMember) as bool
	
	get box from var as Box
	
	# Used to prevent duplicates
	var _uniqueEntries = HashSet<of String>()
	
	cue init(b as Box)
		.init(b, nil)
	
	cue init(b as Box, filter as MemberFilter?)
		base.init
		_box = b
		
		/# Pretend we've already seen 'cue.init' and the indexer '[]'
		so they are not included in the final list #/
		_uniqueEntries.add("cue.init")
		_uniqueEntries.add(ns'[]')
		_addMembers(b.tryAllMembers, filter)
		
		if b inherits Extension
			# include the public members from the extended box
			publicOnly as MemberFilter? = nil
			if filter <> nil
				# TODO: I'm thinking using a sig for filtering is wasteful...
				publicOnly = do(m as IBoxMember)
					return if(filter(m), "public" in m.isNames, false)
			else
				publicOnly = do(m as IBoxMember)
					return "public" in m.isNames
			_addMembers(b.extendedBox.tryAllMembers, publicOnly)
		
	def _addMembers(members as IBoxMember*, filter as MemberFilter?)
		"""
		Adds an entry to the completion data list for each member in
		the stream `members` that matches the criteria defined by `filter`.
		"""
		
		if filter == nil
			# include all members
			for m in members
				if _uniqueEntries.add(m.name)
					.add(NamedNodeData(m))
		else
			# we should only include some members
			for m in members
				if _uniqueEntries.add(m.name) and filter(m)
					.add(NamedNodeData(m))


	def addExtensionMethods(ns as NameSpace)
		"""
		Adds completion data entries for extension methods declared in the
		given namespace for this box.
		"""
		test
			# prepare data
			ast = CobraCompletionTextEditorExtension.createTestData
			namespaces = List<of NameSpace>()
			ns = ast.topNameSpace.memberForName("TopLevelNameSpace") to NameSpace
			namespaces.add(ns)
			ns = ns.memberForName("SecondLevelNameSpace") to NameSpace
			namespaces.add(ns)
			ns = ns.memberForName("ThirdLevelNameSpace")to NameSpace
			namespaces.add(ns)
			
			f = ns.memberForName("First") to Class
			s = ns.memberForName("Second") to Class
			
			for ud in ast.topNameSpace.useDirectives
				namespaces.add(ud.boundNameSpace to !)
			
			filter as BoxMembersList.MemberFilter = do(m as IBoxMember)
				return "public" in m.isNames
			
			# do the test for the First class
			firstMembers = BoxMembersList(f, filter)
			originalCount = firstMembers.count
			assert originalCount > 0
			assert firstMembers.find("anExtensionMethod") == nil
			for ns in namespaces
				firstMembers.addExtensionMethods(ns)
			newCount = firstMembers.count
			assert newCount > 0
			assert firstMembers.find("anExtensionMethod") <> nil
			assert firstMembers.find("anotherExtensionMethod") <> nil
			assert firstMembers.find("thisOneReturnsIList") == nil
			
			# the Second class should include the extensions on the First class
			secondMembers = BoxMembersList(s, filter)
			assert secondMembers.count > originalCount
			originalCount = secondMembers.count
			for ns in namespaces
				secondMembers.addExtensionMethods(ns)
			assert secondMembers.count > newCount
			newCount = secondMembers.count
			assert newCount > originalCount
			assert secondMembers.find("anExtensionMethod") <> nil
			assert secondMembers.find("anotherExtensionMethod") <> nil
			emData = secondMembers.find("thisOneReturnsIList") to NamedNodeData?
			assert emData <> nil
			assert emData.node inherits Method
			method = emData.node to Method
			box = method.resultType to Box
			assert box.qualifiedName == "System.Collections.Generic.IList<of int>"
			
			# test data members of the extension method
			extData = BoxMembersList(box, filter)
			for ns in namespaces
				extData.addExtensionMethods(ns)
			# verify Cobra.Core extensions are present
			assert extData.find("first") <> nil
			assert extData.find("pop") <> nil
		body
			if _box.baseClass is _box
				# bail on cyclical inheritance
				return
			
			publicOnly as MemberFilter = do(m as IBoxMember)
				return "public" in m.isNames
				
			for nsMember in ns.declsInOrder
				if not nsMember inherits Extension
					continue
				
				extension = nsMember to Extension
				extendedBox = extension.extendedBox
				if extendedBox == nil
					continue
				
				try
					extendedBox.prepIfNeeded
					
					if _box.isAssignableTo(extendedBox to !)
						_addMembers(extension.declsInOrder, publicOnly)
					
					else if _box.isGeneric and extendedBox.isGeneric
						extDef = extendedBox.genericDef to !
						if _box.genericDef == extDef _
						or any for baseInterface in _box.baseInterfaces get baseInterface.genericDef == extDef
							# this is either the same generic definition
							# or we are implementing the same interface.
							# either way it's okay to include the extension members
							boxTemplate = _box.constructedTypeOf(extDef)
							constructedBox = extension.constructedTypeFor(boxTemplate.genericParams)
							constructedBox.prepIfNeeded
							_addMembers(constructedBox.declsInOrder, publicOnly)
				catch ex as Exception
					# Something that relied on a valid compiler instance probably failed.
					# Most likely it was a call to extendedBox.prepIfNeeded
					print "an exception occurred while adding extension methods for [ns.minimalString] to [_box.minimalString]"
					trace ex