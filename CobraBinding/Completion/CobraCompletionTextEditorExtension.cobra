use Cobra.Compiler

use TypeSystem

use Mono.TextEditor

use MonoDevelop.Core
use MonoDevelop.Projects
use MonoDevelop.Ide.Gui
use MonoDevelop.Ide.Gui.Content
use MonoDevelop.Ide.CodeCompletion
use MonoDevelop.Ide.TypeSystem

use ICSharpCode.NRefactory.Completion
use ICSharpCode.NRefactory.TypeSystem


namespace Completion

class CobraCompletionTextEditorExtension inherits CompletionTextEditorExtension
	"""
	Provides support for code completion when editing Cobra source files.
	"""
	
	get completionLanguage as String is override
		return CobraLanguageBinding.languageName
	
	shared
		/#
		This is used when the current parsed document has errors or
		the previous parsed document has better information for
		completion (i.e. bound vs unbound types). It is keyed by fileName.
		#/
		var __parsedDocCache = Dictionary<of String, ParsedCobraDocument?>()
	
	def _getBestParsedDocument as ParsedCobraDocument?
		"""
		Return the last valid parsed document (if any). Prefer a document
		with a type-bound AST.
		"""
		fileName = .fileName.toString
		
		cachedDoc as ParsedCobraDocument? = nil
		cachedAst as CobraModule? = nil
		if __parsedDocCache.containsKey(fileName)
			cachedDoc = __parsedDocCache[fileName]
			cachedAst = cachedDoc.getAst<of CobraModule?>
		
		doc = .document
		if doc == nil
			return cachedDoc
		
		parsedDoc = doc.parsedDocument to ParsedCobraDocument?
		if parsedDoc <> nil
			if cachedDoc == nil
				__parsedDocCache[fileName] = parsedDoc
				return parsedDoc
			else
				# We have a cached document and a current document.
				# Return the one with a more complete AST.
				ast = parsedDoc.getAst<of CobraModule?>
				
				if ast == nil and cachedAst == nil
					__parsedDocCache[fileName] = parsedDoc
					return parsedDoc
				
				else if ast == nil and cachedAst <> nil
					return cachedDoc
					
				else if ast <> nil and cachedAst == nil
					__parsedDocCache[fileName] = parsedDoc
					return parsedDoc
				
				else
					# we have two ASTs, prefer the one with less parsing errors
					if cachedDoc.parseErrorCount < parsedDoc.parseErrorCount
						return cachedDoc
					else
						__parsedDocCache[fileName] = parsedDoc
						return parsedDoc
		
		return cachedDoc
	
	def _canHandleCodeCompletion(context as CodeCompletionContext?, completionChar as char,
								txtDoc as TextDocument?, parsedDoc as ParsedCobraDocument?) as bool
		"""
		Returns true if the extension is able to provide completion results in the given
		context for the given completion character or false otherwise.
		"""
		if completionChar <> c'.' _
		and completionChar <> c'_' _
		and not completionChar.isLetter
			return false
		
		if context == nil _
		or txtDoc == nil _
		or parsedDoc == nil
			return false
			
		if parsedDoc.ast == nil _
		or parsedDoc.regionMap == nil _
		or parsedDoc.symbolTable == nil
			return false

		if parsedDoc.isInsideComment(context.triggerOffset, txtDoc to !)
			return false
		
		if _isInsideString(context to !, txtDoc to !)
			return false
		
		beginningText = txtDoc.getTextBetween(
			context.triggerLine, 0,
			context.triggerLine, context.triggerLineOffset
		)
		
		if beginningText <> nil
			if .ParserAlias.isStartingDecl(beginningText)
				return false
	
		return true
		
	
	def keyPress(key as Gdk.Key, keyChar as char, modifier as Gdk.ModifierType) as bool is override
		"""
		Look for Return/Enter key presses and then extend regions of doc strings and comment blocks.
		Also, hide the parameter completion window on certain keys or when no longer inside a call.
		
		Returns true if the key that was pressed should be processed by this extension or not.
		"""
		if keyChar == c')' and ParameterInformationWindowManager.isWindowVisible
			ParameterInformationWindowManager.hideWindow(this, .completionWidget)
			return base.keyPress(key, keyChar, modifier)
		
		editor = .editor
		if editor == nil, return base.keyPress(key, keyChar, modifier)
		
		txtDoc = editor.document
		if txtDoc == nil, return base.keyPress(key, keyChar, modifier)
		
		if ParameterInformationWindowManager.isWindowVisible
			# make sure we are inside an actual method call.
			# we might not be if we hit the arrow keys and there are no overloads
			startOffset = txtDoc.locationToOffset(editor.caret.line, 0)
			endOffset = editor.caret.offset
			text = txtDoc.getTextBetween(startOffset, endOffset) ? ""
			if not ParserAlias.isInsideCall(text) _
			or text.trimStart.startsWith("def") _
			or text.trimStart.startsWith("cue init")
				ParameterInformationWindowManager.hideWindow(this, .completionWidget)
				return base.keyPress(key, keyChar, modifier)
		
		if key == Gdk.Key.KP_Enter or key == Gdk.Key.Return
			doc = .document
			if doc == nil, return base.keyPress(key, keyChar, modifier)
			
			parsedDoc = doc.parsedDocument
			if parsedDoc == nil, return base.keyPress(key, keyChar, modifier)
		
			line = editor.caret.line - 1
			prevLineText  = txtDoc.getLineText(line) ? ""
			col = prevLineText.length - 1
			col = if(col < 0, 0, col)
			for fold in parsedDoc.foldings
				if fold.type == FoldType.Comment
					if fold.region.beginLine == line or fold.region.isInside(line, col)
						fold.region = _resizeNonCodeRegion(fold.region, txtDoc to !)
		
		return base.keyPress(key, keyChar, modifier)
		
		
	def _resizeNonCodeRegion(region as DomRegion, txtDoc as TextDocument) as DomRegion
		"""
		Extends the given DomRegion based on the text contents of the document.  Useful for
		handling Enter/Return key-presses before the regions of the .parsedDocument have been
		updated by the parser.
		"""
		if txtDoc.getLineText(region.beginLine).contains('"""')
			# look for closing doc string tag
			tag = '"""'
		else if txtDoc.getLineText(region.beginLine).contains("'''")
			# look for alternate style closing doc string tag
			tag = "'''"
		else
			# assume we are resizing a comment block, might be a bad assumption...
			tag = "#/"
		
		lineNum = region.beginLine + 1
		
		while lineNum < txtDoc.lineCount
			lineText = txtDoc.getLineText(lineNum)
			if lineText.contains(tag)
				break
			else
				lineNum += 1
		
		endLocation = ICSharpCode.NRefactory.TextLocation(lineNum, Int32.maxValue)
		return DomRegion(region.fileName, region.begin, endLocation)
			
	
	def codeCompletionCommand(context as CodeCompletionContext?) as ICompletionDataList? is override
		"""
		Called when user hits Ctrl+Space.
		
		context.triggerOffset
		Treating the entire document as a string, this is the character offset used to get the
		completion character.  Backtracking	from the current cursor position, it will be the
		last alphanumeric character (including underscores and dashes) before hitting a
		non-alphanumeric character.
		
		context.triggerLine
		The line number, the first line is considered line number 1.
		
		context.triggerLineOffset
		Treating the current line as a string, this is the character offset to the current
		position of the cursor.  It does not necessarily correspond to the character found
		using the context.triggerOffset.  The value can be negative which represents ???
		TODO: findout what a negative value means
		
		context.triggerWordLength
		This is the length of the "word" starting from the context.triggerOffset position
		
		Example #1:
		use Cobra.Compiler
		
		If this is line 1 and the cursor is at the end of the line
		context.triggerLine = 1
		context.triggerOffset = 10, corresponds to the 'C' in 'Compiler'
		context.triggerLineOffset = 18, corresponds to the position after the 'r' in 'Compiler'
		context.triggerWordLength = 8, the length of the word 'Compiler'
		"""
		editor = .editor
		if editor == nil
			return nil
		txtDoc = editor.document
		if txtDoc == nil
			return nil
		
		if context.triggerOffset > 0
			completionChar = txtDoc.getCharAt(context.triggerOffset - 1)
			triggerWordLength = context.triggerWordLength
			if completionChar.isWhiteSpace and txtDoc.contains(context.triggerOffset)
				# no punctuation was found, grab the first letter if any
				completionChar = txtDoc.getCharAt(context.triggerOffset)
		else
			completionChar = c'\0'
			triggerWordLength = 0
		
		return .handleCodeCompletion(context, completionChar, inout triggerWordLength)
	
	
	def handleCodeCompletion(context as CodeCompletionContext?, completionChar as char,
							triggerWordLength as inout int) as ICompletionDataList? is override
		"""
		This method is called indirectly by .keyPress or when the user hits Ctrl+Space.
		"""
		editor = .editor
		if editor == nil
			# shouldn't happen
			return nil
		
		txtDoc = editor.document
		parsedDoc = _getBestParsedDocument
		if not _canHandleCodeCompletion(context, completionChar, txtDoc, parsedDoc)
			# not enough information to provide completion results
			return nil
		
		# extend code regions to include blank lines
		parsedDoc.extendRegions(txtDoc to !)
		
		# get metadata from the parsed document to help
		# us with creating completion results
		ast = parsedDoc.getAst<of CobraModule>
		nodeMap = parsedDoc.createNodeMap to !
		node as ISyntaxNode? = nil
		
		line = context.triggerLine
		lineText = txtDoc.getLineText(line) ? ""
		
		col = context.triggerLineOffset - 1
		if col >= lineText.length
			col = lineText.length - 1
		if col < 0
			col = 0
		
		if triggerWordLength == 0 and completionChar <> c'.'
			/# This was not Ctrl+Space completion. Build the trigger word by
			backtracking through the line of text until we hit a character
			that is not valid for an identifier #/
			
			# include the letter that was just typed as part of the trigger word
			while col >= 0
				if  lineText[col] == c'_' or lineText[col].isLetterOrDigit
					# include this character in the trigger word
					triggerWordLength += 1
					completionChar = lineText[col]
				else
					# invalid character for an identifier, stop backtracking
					if lineText[col] == c'.'
						# dot completion
						completionChar = lineText[col]
					col += 1
					break
				col -= 1
			
			if col < 0
				col = 0
		
		containingRegions = parsedDoc.getContainingRegions(line, col)
		
		# the text before the completion chararacter should not include the completion character or the trigger word
		if context.triggerLineOffset > 0 and lineText.length > 0
			preceedingText = lineText.substring(0, context.triggerLineOffset - 1)
			
			if completionChar == c'.' and triggerWordLength <> 0
				# hit Ctrl+Space on keyboard, we may have some extra characters
				dotPos = preceedingText.lastIndexOf(completionChar)
				if dotPos > 0, preceedingText = preceedingText.substring(0, dotPos)
		else
			preceedingText = ""
		
		completionData = CobraCompletionList()
		
		prevChar = c' '
		if preceedingText.length <> 0
			prevChar = preceedingText[preceedingText.length - 1]
		
		if completionChar == c'_' and not prevChar.isLetterOrDigit
			# protected/private member completion in the context of the current class
			node = parsedDoc.getContainingBox(containingRegions, nodeMap)
			if node inherits Box
				return BoxMembersList(node)
			else
				print "Container does not inherit Box : [node]"
				return nil
		
		else if completionChar == c'.'
			# member completion
			if not prevChar.isLetterOrDigit and prevChar <> c')' and prevChar <> c']'
				# return fields and methods in the context of the current class
				node = parsedDoc.getContainingBox(containingRegions, nodeMap)
				if node inherits Box
					# collect visible namespaces for finding extension methods
					namespaces = _getNameSpaces(parsedDoc to !, ast, containingRegions, nodeMap)
					return DataFactory.createBoxAllMembersList(node, namespaces)
				else
					print "Container does not inherit Box : [node]"
					return nil
			else
				# return fields and methods for the corresponding node
				node = parsedDoc.resolveTextToNode(preceedingText, containingRegions)
				if node == nil, return nil
				
				if node inherits NameSpace
					if preceedingText.startsWith("use ")
						# creating a use directive, only show namespaces
						return DataFactory.createSubNameSpaceList(node)
					else
						completionData.addRange(NameSpaceDeclsList(node))
				else
					typ = _getTypeForMemberCompletion(node to !)
					if typ == nil, return nil
					
					members as ICompletionDataList? = nil
					
					if typ inherits Box
						if node inherits NamedNode
							if node.name.isCapitalized
								# probably a class so only provide shared members
								members = DataFactory.createBoxSharedMembersList(typ)
							else
								# probably a field or method
								# collect visible namespaces for finding extension methods
								namespaces = _getNameSpaces(parsedDoc to !, ast, containingRegions, nodeMap)
								members = DataFactory.createBoxInstanceMembersList(typ, namespaces)
						else
							# a literal or something else we can probably treat as an instance...right?
							print "this is unexpected. [node] does not inherit NamedNode\n"
							members = DataFactory.createBoxInstanceMembersList(typ)
					else if typ inherits EnumDecl
						if node inherits NamedNode
							if node.name.isCapitalized
								return DataFactory.createEnumMembersList(typ)
							else
								return nil
					else
						print "typ does not inherit Box or EnumDecl. typ = [typ]\n"
						return nil
						
					if members <> nil, completionData.addRange(members)
				
				return DataFactory.uniqueCompletionEntries(completionData)
		
		# return completion data based on containing regions
		regionData = CobraCompletionList()
		for region in containingRegions
			for d in _getCompletionData(region, preceedingText, "TODO", nodeMap, ast)
				regionData.add(d)
		
		uniqueData = DataFactory.uniqueCompletionEntries(regionData)
		completionData.addRange(uniqueData)

		if completionData.count == 0
			# this can happen if we are somehow not in a region
			# (e.g. the very first position of the document)
			completionData.addRange(_getTopNameSpaceCompletionData(ast))
		
		return completionData
		
		
	def _getTypeForMemberCompletion(node as ISyntaxNode) as Cobra.Compiler.IType?
		"""
		Given a node, returns the type whose members should be used to generate the
		list of completion data.
		"""
		typ as Cobra.Compiler.IType? = nil
		
		if node inherits AbstractLocalVar
			# this could be a method parameter or local variable
			typ = node.type
		
		else if node implements Cobra.Compiler.IMember
			# this is a box/namespace member
			typ = node.resultType
		
		if typ == nil
			print "[node] does not inherit AbstractLocalVar or StreamType and does not implement Cobra.Compiler.IMember\n"
			return nil
		
		if typ inherits NilableType
			typ = typ.nonNil
			
		if typ inherits PrimitiveType
			typ = typ.box
		else if typ inherits Cobra.Compiler.ArrayType
			typ = typ.box
		else if typ inherits StreamType
			typ = typ.box
				
		return typ
	
		
	def handleParameterCompletion(context as CodeCompletionContext?, completionChar as char) _
		as ParameterDataProvider? is override
		"""
		Return the object that will control the information displayed for
		method parameters.  In some instances, we won't return anything which
		means the current provider (if any) should be reused.
		"""
		if ParameterInformationWindowManager.isWindowVisible
			# the window is already displayed, don't create a new provider
			# otherwise we will reset the current overload back to 0
			return nil
		
		if completionChar == c'\0'
			# don't return a provider for navigation keys
			return nil
		
		# make sure we have the required data
		if context == nil, return nil
		editor = .editor
		if editor == nil, return nil
		txtDoc = editor.document
		if txtDoc == nil, return nil
		
		# make sure we are inside an actual method call
		startOffset = txtDoc.locationToOffset(context.triggerLine, 0)
		endOffset = context.triggerOffset
		text = txtDoc.getTextBetween(startOffset, endOffset) ? ""
		if not ParserAlias.isInsideCall(text) _
		or text.trimStart.startsWith("def") _
		or text.trimStart.startsWith("cue init")
			return nil
		
		parsedDoc = _getBestParsedDocument
		if parsedDoc == nil, return nil
		if parsedDoc.isInsideComment(endOffset, txtDoc to !)
			return nil
		
		# backtrack past the args that have already been specified
		# to the position of the opening parenthesis for this call
		endOffset -= 1
		requiredParensCount = 1
		for i in text.length - 1 : 0 : -1
			c = text[i]
			if c == c')'
				# a closing parenthesis means we'll ignore the next
				# opening parenthesis we see.
				# For example, we would ignore the opening parenthesis
				# for 'bar(y)' in 'foo(x, bar(y), z'
				requiredParensCount += 1
			else if c == c'('
				requiredParensCount -= 1
				if requiredParensCount == 0
					# we found the opening parenthesis
					break
			endOffset -= 1
		
		if endOffset <= startOffset, return nil
		
		node = parsedDoc.resolveOffsetToNode(endOffset, txtDoc to !)
		if node == nil, return nil
		
		if node inherits ClassOrStruct
			try
				node = node.memberForName('cue.init') to ISyntaxNode
			catch
				# probably an invalid compiler state
				return nil
		
		if node inherits MemberOverload
			node = node.members[0] to ISyntaxNode
		
		if node inherits AbstractMethod
			return CobraParameterDataProvider(this, endOffset, node)
		
		#TODO: handle indexers, dictionary keys, and generic args
		
		return nil
		
	
	def getCurrentParameterIndex(startOffset as int) as int is override
		"""
		Returns the 1-based index for the current parameter or -1 for unhandled cases.
		"""
		or require
			.editor <> nil
			.editor.caret <> nil
		body
			endOffset = .editor.caret.offset
			if endOffset < startOffset, return -1
			
			txtDoc = .editor.document
			if txtDoc == nil, return -1
			
			text = txtDoc.getTextBetween(startOffset, endOffset) ? ""
			return text.count(c',') + 1
	
		
	def guessBestMethodOverload(provider as IParameterDataProvider?, currentOverload as int) _
		as int is override
		
		if provider <> nil
			return .guessBestMethodOverload(provider to CobraParameterDataProvider, currentOverload)
		else
			return -1
	
	def guessBestMethodOverload(provider as CobraParameterDataProvider, currentOverload as int) as int
		currentParam = .getCurrentParameterIndex(provider.startOffset)
		if currentParam > provider.getParameterCount(currentOverload) _
		and not provider.allowParameterList(currentOverload)
			# find a better overload
			# TODO: parse the line and use the types of the args already specified to find a better overload
			for i in provider.count
				if provider.getParameterCount(i) >= currentParam
					return i
		return -1
	
	
	def _isInsideString(context as CodeCompletionContext, txtDoc as TextDocument) as bool
		"""
		Returns true if we should not provide code completion in the given
		context because we are inside a string literal and not inside
		[expression brackets].
		"""
		line = context.triggerLine
		col = context.triggerLineOffset
		if line < 1, line = 1
		if col < 0, col = 0
		
		lineText = txtDoc.getLineText(line) ? ""
		if col > lineText.length, col = lineText.length
		
		return ParserAlias.isInsideString(lineText.substring(0, col), false)


	def _getCompletionData(region as DomRegion, preceedingText as String, currText as String,
							nodeMap as Dictionary<of DomRegion, ISyntaxNode>, ast as CobraModule) as ICompletionDataList
		"""
		Returns completion data in the context of the given DomRegion.
		"""
		dataList = CobraCompletionList()
		
		try
			node = nodeMap[region]
		catch
			print "ERROR! Couldn't resolve region to node: [region.toString]"
			return dataList
		
		if node inherits NameSpace
			# being inside a namespace means we have access to all the classes inside of it
			if node is ast.topNameSpace
				dataList.addRange(_getTopNameSpaceCompletionData(ast))
			else
				dataList.addRange(DataFactory.createNameSpaceDeclsList(node))
			
		else if node inherits Box
			# being inside a box gives us access to certain keywords
			dataList.addRange(DataFactory.keywordListInBox)
			
		else if node inherits AbstractMethod
			# being inside a method gives us access to all its local variables and more Cobra keywords
			dataList.addRange(DataFactory.keywordListInMethod)
			dataList.addRange(MethodVarsList(node))
		else
			print "TODO: handle this type of container: [node.toString]"
		
		return dataList
	
		
	def _getTopNameSpaceCompletionData(ast as CobraModule) as ICompletionDataList
		dataList = CobraCompletionList()
		dataList.addRange(DataFactory.keywordListTopLevel)
		dataList.addRange(DataFactory.keywordListFollowingIs)
		dataList.addRange(DataFactory.keywordListCobraTypes)
		dataList.addRange(DataFactory.keywordListLiterals)
		dataList.addRange(DataFactory.createModuleDeclsList(ast))
		return dataList
		
	def _getNameSpaces(parsedDoc as ParsedCobraDocument, ast as CobraModule,
			containingRegions as List<of DomRegion>,
			nodeMap as Dictionary<of DomRegion, ISyntaxNode>) as List<of NameSpace>
		"""
		Helper method for finding extension methods.
		"""
		namespaces = List<of NameSpace>()
		ns = parsedDoc.getContainingNameSpace(containingRegions, nodeMap)
		if ns <> nil and ns.unifiedNameSpace <> nil
			namespaces.add(ns)
		
		topNamespace = ast.getDefaultNamespace
		for useDirective in topNamespace.useDirectives
			ns = useDirective.boundNameSpace
			if ns <> nil, namespaces.add(ns)
		return namespaces

	shared
		def createTestData as CobraModule
			"""
			This function is only for supporting test methods.
			"""
			cm = CompilerManager.instance
			testData = CompilerManager.readTestData("no_errors")

			for filePath, code in testData
				if filePath.endsWith("ForCompletionTesting.cobra")
					sourceMap = Dictionary<of String, String>()
					sourceMap[filePath] = code
					return cm.parseAndBind(sourceMap, filePath).getAst<of CobraModule>
			
			throw FallThroughException()

		class ParserAlias inherits TypeSystem.Parser
			"""
			This is just to avoid a name conflict with Cobra.Compiler.Parser
			"""
			pass
