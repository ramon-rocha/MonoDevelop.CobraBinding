use Cobra.Compiler

use MonoDevelop.Ide.CodeCompletion
use Tooltips

namespace Completion

class CobraParameterDataProvider inherits ParameterDataProvider
	
	var _completionExtension as CobraCompletionTextEditorExtension
	
	cue init(ext as CobraCompletionTextEditorExtension, startOffset as int, m as AbstractMethod)
		base.init(startOffset)
		_completionExtension = ext
		_method = m
		
	get method from var as AbstractMethod
	
	get count as int is override
		"""
		The number of overloads available for this method.
		"""
		and ensure result > 0
		return if(_method.overloadGroup, _method.overloadGroup.members.count, 1)
	
	
	def _getParameter(overload as int, currentParameter as int) as Param
		require
			overload >= 0
			overload < .count
			currentParameter >= 0
			currentParameter < .getParameterCount(overload)
		body
			if overload == 0 or .count == 0
				return _method.params[currentParameter]
			else
				return _method.overloadGroup.members[overload].params[currentParameter]
	
	
	def getParameterName(overload as int,  currentParameter as int) as String? is override
		"""
		Returns the name of the parameter at the specified index for the given overload ID.
		"""
		#TODO: do we ever get invalid input?  do we need these checks?
		if overload < 0 or overload >= .count
			return nil
		
		if currentParameter < 0 or currentParameter >= .getParameterCount(overload)
			return nil
		
		return _getParameter(overload, currentParameter).name
	
	
	def allowParameterList(overload as int) as bool is override
		"""
		Returns true if this overload allows for a variable number of arguments.
		"""
		if overload < 0 or overload >= .count
			return false
		
		if overload == 0
			return _method.hasVariParams
		
		params = _method.overloadGroup.members[overload].params
		return params.last.typeForReceiver inherits VariType
	
	
	def getParameterCount(overload as int) as int is override
		"""
		Return the number of parameters available for the given overload ID.
		
		Returns -1 for an invalid overload ID value.
		"""
		if overload < 0 or overload >= .count
			return -1
		
		if overload == 0
			return _method.params.count
		else
			return _method.overloadGroup.members[overload].params.count
	
		
	def createTooltipInformation(
			overload as int,
			currentParameter as int,
			smartWrap as bool
		) as TooltipInformation is override
		"""
		Return the tooltip object to display for the given overload and current parameter indices.
		"""
		if overload < 0
			overload = 0
		else if overload >= .count
			overload = .count - 1
		
		if currentParameter < 0
			currentParameter = 0
		
		if overload == 0
			info = TooltipProvider.createCodeCompletionTooltip(_method)
		else
			info = TooltipProvider.createCodeCompletionTooltip(_method.overloadGroup.members[overload])
		
		# bold the currentParameter (if any)
		paramCount = .getParameterCount(overload)
		if paramCount > 0
			if currentParameter < paramCount
				paramMarkup = _getParameter(overload, currentParameter).createTooltipMarkup
			else if .allowParameterList(overload)
				# variable list of arguments, bold the last parameter
				paramMarkup = _getParameter(overload, paramCount - 1).createTooltipMarkup
			else
				# invalid parameter index, don't bold any parameter name
				return info
			
			info.signatureMarkup = info.signatureMarkup.replace("[paramMarkup]", "<b>[paramMarkup]</b>")
		
		return info