use Cobra.Compiler

use MonoDevelop.Ide.CodeCompletion

use ICSharpCode.NRefactory.Completion

namespace Completion

class DataFactory
	"""
	Provides completion data entries and data lists.
	"""
	
	shared
	
		def _createKeywordList(keywords as String[]) as CobraCompletionList
			list = CobraCompletionList()
			for kw in keywords
				list.add(KeywordCompletionData(kw))
			return list
		
		
		var _keywordsTopLevel = @[
			"use",
			"namespace",
			"class",
			"interface",
			"struct",
			"mixin",
			"enum",
			"sig",
			"extend",
			"adds",
			"inherits",
			"implements",
			"has",
			"is",
		]
		
		var _kwListTopLevel as CobraCompletionList?
		
		get keywordListTopLevel as CobraCompletionList
			_kwListTopLevel ?= _createKeywordList(_keywordsTopLevel)
			return _kwListTopLevel to !
		
		var _keywordsFollowingIs = @[
			"public",
			"protected",
			"private",
			"internal",
			
			"partial",
			"virtual",
			"nonvirtual",
			"override",
			"new",
			
			"shared",
			"readonly",
			"abstract",
			"extern"
		]
		
		var _kwListFollowingIs as CobraCompletionList?
		
		get keywordListFollowingIs as CobraCompletionList
			_kwListFollowingIs ?= _createKeywordList(_keywordsFollowingIs)
			return _kwListFollowingIs to !
		
		var _keywordsInBox = @[
			"is",
			"shared",
			"override",
			"new",
			"private",
			"public",
			"protected",
			"internal",
			"virtual",
			"nonvirtual",
			"abstract",
			"extern",
			"partial",
			"readonly",
			
			"def",
			"var",
			"test",
			"invariant",
			"cue init",
			"var",
			"as",
			"def",
			"pro",
			"get",
			"set",
			"from",
			
			"class",
			"interface",
			"struct",
			"mixin",
			"enum",
			"sig",
		]
		
		var _kwListInBox as CobraCompletionList?
		
		get keywordListInBox as CobraCompletionList
			_kwListInBox ?= _createKeywordList(_keywordsInBox)
			return _kwListInBox to !
		
		var _keywordsInMethod = @[
			"require",
			"ensure",
			"test",
			"body",
			
			"print",
			"stop",
			"pass",
			"lock",
			"using",
			"try",
			"catch",
			"success",
			"finally",
			"throw",
			"assert",
			"expect",
			"trace",
			"if",
			"and",
			"or",
			"not",
			"in",
			"else",
			"branch",
			"on",
			"any",
			"all",
			"for",
			"get",
			"while",
			"post",
			"break",
			"continue",
			"yield",
			"ref",
			"do",
			"this",
			"base",
			"return",
			"listen",
			"raise",
			"ignore",
		]
		
		var _kwListInMethod as CobraCompletionList?
		
		get keywordListInMethod as CobraCompletionList
			_kwListInMethod ?= _createKeywordList(_keywordsInMethod)
			return _kwListInMethod to !
		
		var _keywordsCobraTypes = @[
			"bool",
			"char",
			"int",
			"uint",
			"float",
			"decimal",
			"number",
			"dynamic"
		]
		
		var _kwListCobraTypes as CobraCompletionList?
		
		get keywordListCobraTypes as CobraCompletionList
			_kwListCobraTypes ?= _createKeywordList(_keywordsCobraTypes)
			return _kwListCobraTypes to !
		
		var _keywordsLiterals = @[
			"true",
			"false",
			"nil"
		]
		
		var _kwListLiterals as CobraCompletionList?
		
		get keywordListLiterals as CobraCompletionList
			_kwListLiterals ?= _createKeywordList(_keywordsLiterals)
			return _kwListLiterals to !

		def createNodeData(node as INamedNode) as NamedNodeData
			"""
			Returns a single entry to be added to a completion data list for the given AST node.
			"""
			return NamedNodeData(node)
		
		def createEnumMembersList(e as EnumDecl) as CobraCompletionList
			"""
			Returns a list of completion entries for the members of the given enum declaration.
			"""
			data = CobraCompletionList()
			for d in e.declsInOrder
				data.add(NamedNodeData(d))
			return data
			
		def createBoxAllMembersList(box as Box, namespaces as NameSpace*? = nil) as BoxMembersList
			"""
			Returns a completion data list that includes all box members.
			"""
			if namespaces == nil
				# no namespaces means no extension methods
				return BoxMembersList(box, nil)
			
			members = BoxMembersList(box, nil)
			for ns in namespaces
				members.addExtensionMethods(ns)
			return members
			
		def createBoxInstanceMembersList(box as Box, namespaces as NameSpace*? = nil) as BoxMembersList
			"""
			Returns a completion data list that only includes public non-shared members.
			"""
			filter as BoxMembersList.MemberFilter = do(m as IBoxMember)
				return not m.isShared and m.isPublic
			
			if namespaces == nil
				# no namespaces means no extension methods
				return BoxMembersList(box, filter)
			
			members = BoxMembersList(box, filter)
			for ns in namespaces
				members.addExtensionMethods(ns)
			return members
			
		def createBoxSharedMembersList(box as Box) as BoxMembersList
			"""
			Returns a completion data list that only includes public shared members.
			"""
			filter as BoxMembersList.MemberFilter = do(m as IBoxMember)
				if m.isPublic
					# only check isShared for BoxMember subclasses
					# otherwise things like nested class decls do
					# not get included in completion proposals.
					if m inherits BoxMember
						return m.isShared
					else
						# probably a nested class declaration
						return true
				return false
			return BoxMembersList(box, filter)
			
		def createMethodVarsList(method as AbstractMethod) as MethodVarsList
			"""
			Returns a completion data list whose entries are made from the local
			variables and parameters declared in the given method.
			"""
			return MethodVarsList(method)
		
		def createNameSpaceDeclsList(nameSpace as NameSpace) as NameSpaceDeclsList
			"""
			Returns a completion data list whose entries are all the declarations
			made in the given namespace.
			"""
			if nameSpace.isUnified or nameSpace.unifiedNameSpace == nil
				return NameSpaceDeclsList(nameSpace)
			else
				return NameSpaceDeclsList(nameSpace.unifiedNameSpace)
		
		def createModuleDeclsList(ast as CobraModule) as CobraCompletionList
			"""
			Returns all declarations that are visible in the context of the given
			Cobra module.
			
			TODO: Cache completion lists from implict use statements.  They don't change.
			"""
			dataList = CobraCompletionList()
			dataList.addRange(.createNameSpaceDeclsList(ast.getGlobalNamespace))

			for useStmt in ast.getDefaultNamespace.useDirectives
				try
					if not useStmt.didBindUse, useStmt.bindUse
					ns = useStmt.boundNameSpace
					if ns <> nil, dataList.addRange(.createNameSpaceDeclsList(ns))
				catch ex as Exception
					trace ex.message
			
			return .uniqueCompletionEntries(dataList)
			
		def createSubNameSpaceList(ns as NameSpace) as CobraCompletionList
			"""
			Returns a completion data list whose entries are all the
			sub-namespaces declared in the given parent namespace.
			This is useful for showing appropriate completion entries
			when writing a 'use' directive such as 'use Foo.Bar'
			
			Example:
				if 'ns' corresponds to the NameSpace node for the
				'System.Collections' namespace, then the returned list
				would contain the entries for only the Concurrent,
				Generic, ObjectModel, and Specialized NameSpace nodes.
			"""
			subNameSpaces = CobraCompletionList()
			for d in ns.declsInOrder
				if d inherits NameSpace
					subNameSpaces.add(NamedNodeData(d))
			return subNameSpaces
			
		def uniqueCompletionEntries(dataList as CobraCompletionList) as CobraCompletionList
			"""
			Returns a new completion data list containing only the unique
			completion data entries from the given list.
			"""
			test
				initialList = CobraCompletionList()
				initialList.add("foo", Icons.error, "", "")
				initialList.add("foo", Icons.error, "", "")
				initialList.add("bar", Icons.error, "", "")
				initialList.add("bar", Icons.error, "", "")
				initialList.add("baz", Icons.error, "", "")
				filteredList = DataFactory.uniqueCompletionEntries(initialList)
				assert filteredList.count == 3
				assert initialList.count == 5
			body
				dataSet = HashSet<of String>()
				uniqueData = CobraCompletionList()
				
				for d in dataList
					if dataSet.add(d.toString)
						uniqueData.add(d)
				
				return uniqueData
