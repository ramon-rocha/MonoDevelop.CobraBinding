use Cobra.Compiler

use Mono.TextEditor

namespace Tooltips

extend String
	def escapeMarkup as String
		"""
		Returns a new String with its angle brackets in their escaped representation.
		
		i.e. Turns 'List<of Foo>' into 'List&lt;of Foo&gt;'
		"""
		escaped = .replace("&", "&amp;")
		escaped = escaped.replace("<", "&lt;")
		escaped = escaped.replace(">", "&gt;")
		return escaped

extend Box

	def createBoxNameMarkup as String
		"""
		A helper function for creating the markup for the name of a Box node.
		"""
		if not .isGeneric
			return .name.replace(",", ", ").escapeMarkup
			
		# fix markup for generics
		# e.g. turn "<of,>" into "<of T1, T2>"
		toReplace = StringBuilder("<of")
		replaceWith = StringBuilder()
		for gp in .genericParams
			if replaceWith.length > 0
				toReplace.append(",")
				replaceWith.append(", [gp.name]")
			else
				replaceWith.append("<of [gp.name]")
		toReplace.append(">")
		replaceWith.append(">")
		
		r1 = toReplace.toString
		r2 = replaceWith.toString
		return .name.replace(r1, r2).escapeMarkup
		

extend IType

	def createFullNameMarkup as String
		"""
		Returns markup for the fully qualified name of this IType instance
		such as 'System.String' or 'System.Collections.Generic.List<of int>'.
		"""
		typ = this
		if typ inherits WrappedType
			if typ inherits VariType
				return "vari [typ.theWrappedType.createFullNameMarkup]"
			else
				return "[typ.theWrappedType.createFullNameMarkup][typ.suffix]"
		
		if typ inherits Box
			nameMarkup = typ.createBoxNameMarkup
		else
			nameMarkup = typ.name
		
		if typ.parentNameSpace <> nil and typ.parentNameSpace.fullName <> "global"
			return "[typ.parentNameSpace.fullName].[nameMarkup]"
		else if typ.superNode inherits Box
			parentBox = typ.superNode to IType
			return "[parentBox.createFullNameMarkup].[nameMarkup]"
		
		return nameMarkup


extend INamedNode
	
	def createTooltipMarkup as String
		"""
		Returns markup suitable for use in a tooltip.  It will have a format
		similar to one of the following examples:
		
		namespace Foo.Bar.Baz
		
		class Foo
		
		def foo(bar as int) as String
		
		foo as Bar?
		"""
		test whitespace
			parsedDoc = TooltipProvider.readTestData
			txtDoc = TextDocument(parsedDoc.content)
			
			assert parsedDoc.resolveLocationToNode(1, 1, txtDoc) == nil
			assert parsedDoc.resolveLocationToNode(12, 2, txtDoc) == nil
			assert parsedDoc.resolveLocationToNode(20, 2, txtDoc) == nil
			assert parsedDoc.resolveLocationToNode(37, 1, txtDoc) == nil
		
		test realNodes
			parsedDoc = TooltipProvider.readTestData
			txtDoc = TextDocument(parsedDoc.content)
			
			node = parsedDoc.resolveLocationToNode(2, 8, txtDoc) to INamedNode
			assert node.name == "Foo"
			assert node.createTooltipMarkup == "class Foo"
			
			node = parsedDoc.resolveLocationToNode(4, 6, txtDoc) to INamedNode
			assert node.name == "bar"
			assert node.createTooltipMarkup == "def bar(p1 as int, p2 as int) as System.String"
			
			node = parsedDoc.resolveLocationToNode(4, 10, txtDoc) to INamedNode
			assert node.name == "p1"
			assert node.createTooltipMarkup == "p1 as int"
			
			node = parsedDoc.resolveLocationToNode(4, 21, txtDoc) to INamedNode
			assert node.name == "p2"
			assert node.createTooltipMarkup == "p2 as int"
			
			node = parsedDoc.resolveLocationToNode(4, 39, txtDoc) to INamedNode
			assert node.name == "String"
			assert node.createTooltipMarkup == "class System.String\nis extern"
			
			node = parsedDoc.resolveLocationToNode(5, 7, txtDoc) to INamedNode
			assert node.name == "sum"
			assert node.createTooltipMarkup == "sum as int"
			
			node = parsedDoc.resolveLocationToNode(8, 6, txtDoc) to INamedNode
			assert node.name == "baz"
			assert node.createTooltipMarkup == "def baz as void"
			
			node = parsedDoc.resolveLocationToNode(11, 8, txtDoc) to INamedNode
			assert node.name == "Soop"
			assert node.createTooltipMarkup == "sig Soop(x as System.String) as decimal"
			
			node = parsedDoc.resolveLocationToNode(19, 39, txtDoc) to INamedNode
			assert node.name == "Chook"
			assert node.createTooltipMarkup == "interface Bar.Chook"
			
			node = parsedDoc.resolveLocationToNode(21, 6, txtDoc) to INamedNode
			assert node.name == "_s"
			assert node.createTooltipMarkup == "var _s as Soop?\nis protected"
			
			node = parsedDoc.resolveLocationToNode(35, 18, txtDoc) to INamedNode
			assert node.name == "Lookie"
			assert node.createTooltipMarkup == "mixin Nonsense.Bar.Lookie"
			
			node = parsedDoc.resolveLocationToNode(37, 12, txtDoc) to INamedNode
			assert node.name == "combine"
			assert node.createTooltipMarkup ==
				"def combine([CobraCore.newLine]" + _
				"\txs as System.Collections.Generic.List&lt;of int&gt;,[CobraCore.newLine]" + _
				"\tys as System.Collections.Generic.List&lt;of int&gt;[CobraCore.newLine]" + _
				") as System.Collections.Generic.List&lt;of int&gt;"
			
			node = parsedDoc.resolveLocationToNode(40, 9, txtDoc) to INamedNode
			assert node.name == "combined"
			assert node.createTooltipMarkup == "combined as System.Collections.Generic.List&lt;of int&gt;"
			box = node.typeForReceiver to Box
			node = box.memberForName("cue.init") to INamedNode
			if node inherits MemberOverload
				node = node.members[0] to INamedNode
			assert node.createTooltipMarkup == "class List&lt;of int&gt;()\nis nonvirtual"
			
			compiler = Node.typeProvider to Compiler
			sysNamespace = compiler.globalNS.memberForName("System") to NameSpace
			node = sysNamespace.memberForName("Tuple<of,,>") to INamedNode
			assert node.createTooltipMarkup == "class System.Tuple&lt;of T1, T2, T3&gt;"
		
		body
			/#
			colorScheme = IdeApp.preferences.colorScheme
			colorStyle = Highlighting.SyntaxModeService.getColorStyle(colorScheme)
			
			chunkStyle = colorStyle.keywordConstants
			color = colorStyle.getForeground(chunkStyle) to HslColor
			colorString = HelperMethods.getColorString(color to Gdk.Color)
			
			return '[.name] <span foreground="[colorString]">as</span> [.getType.name]'
			#/
			
			node = this
			typ as IType? = nil
			
			if node inherits NameSpace
				return "namespace [node.fullName]"
			
			else if node inherits AbstractLocalVar
				# this could be a method parameter or local variable
				typ = node.type
				if typ == nil
					try
						node.bindAll
						typ = node.type
					catch ex as Exception
						trace ex.message
						print ex.toString
				
				if typ == nil
					return "[node.name] as ???"
				
				if node inherits Param
					if node.isOut
						return "[node.name] as out [typ.createFullNameMarkup]"
					else if node.isInOut
						return "[node.name] as inout [typ.createFullNameMarkup]"
					else if node.isOptional
						defaultValue = node.optionalValue.toCobraSource
						return "[node.name] as [typ.createFullNameMarkup] = [defaultValue]"
				
				return "[node.name] as [typ.createFullNameMarkup]"
			
			else if node inherits EnumMember
				if node.value == nil
					# no need to include tooltip because the user has already typed the EnumDecl name
					return ""
				else
					return "[node.resultType.name] (value = [node.value])"
			
			else if node implements Cobra.Compiler.IMember
				# this is a box/namespace member
				typ = node.resultType
				
				if node inherits Initializer
					parentBox = node.parentBox
					kw = TooltipProvider.declKeyword[parentBox.getType]
					paramMarkup = _createParamMarkup
					markup = "[kw] [parentBox.createBoxNameMarkup]([paramMarkup])[_createTrailingMarkup]"
					if markup.length > 60
						# too long, break it up into multiple lines
						markup = markup.replace(paramMarkup, _createWrappedParamMarkup)
					return markup
				
				else if node inherits Method _
				or node inherits MemberOverload _
				or node inherits MethodSig
					
					kw = TooltipProvider.declKeyword[node.getType]
					nameMarkup = node.name.escapeMarkup
					
					if node inherits MethodSig
						if node.parentNameSpace <> nil and node.parentNameSpace.fullName <> "global"
							nameMarkup = "[node.parentNameSpace.fullName].[nameMarkup]"
						else if node.superNode inherits Box
							superNode = node.superNode to IType
							nameMarkup = "[superNode.createFullNameMarkup].[nameMarkup]"
					
					if typ == nil
						try
							node.bindAll
							typ = node.resultType
						catch ex as Exception
							trace ex.message
							print ex.toString
					if typ == nil
						return "[kw] [nameMarkup] as ???"
					
					paramMarkup = _createParamMarkup
					typeMarkup = typ.createFullNameMarkup
					if paramMarkup.length == 0
						return "[kw] [nameMarkup] as [typeMarkup][_createTrailingMarkup]"
					
					markup = "[kw] [nameMarkup]([paramMarkup]) as [typeMarkup][_createTrailingMarkup]"
					if markup.length > 60
						# too long, break it up into multiple lines
						markup = markup.replace(paramMarkup, _createWrappedParamMarkup)
					return markup
					
				else if node inherits Property
					if node.getPart <> nil and node.setPart <> nil
						# read-write property
						kw = "pro"
					else if node.getPart <> nil
						# read-only property
						kw = "get"
					else
						# write-only property
						kw = "set"
					return "[kw] [node.name.escapeMarkup] as [typ.createFullNameMarkup][_createTrailingMarkup]"
				
				else if node inherits Box
					kw = TooltipProvider.declKeyword[node.getType]
					typ = node to IType
					return "[kw] [typ.createFullNameMarkup][_createTrailingMarkup]"
				
				else if node inherits EnumDecl
					return "enum [typ.parentNameSpace.fullName].[typ.name]"
				
				else
					kw = TooltipProvider.declKeyword[node.getType]
					return "[kw] [node.name.escapeMarkup] as [typ.createFullNameMarkup][_createTrailingMarkup]"
			
			if typ <> nil
				return "Unhandled type for [node.name.escapeMarkup]: [typ.createFullNameMarkup]"
			else
				return "Unhandled type for [node.name.escapeMarkup]: ???"
	
	
	def _createTrailingMarkup as String
		"""
		Return the markup for non-default "is names" and attributes for this node.
		"""
		node = this
		isNames = StringBuilder()
		attributes = StringBuilder()
		if node implements IBoxMember
			for name in node.isNames
				if name <> "public" and name <> "virtual"
					if isNames.length > 0, isNames.append(", ")
					isNames.append(name)
			for att in node.attributes
				if attributes.length > 0, attributes.append(", ")
				attributes.append(att.name)
		
		if isNames.length == 0 and attributes.length == 0
			return ""
		
		if attributes.length == 0
			return "\nis [isNames.toString]"
		
		if isNames.length == 0
			return "\nhas [attributes.toString]"
		
		return "\nis [isNames.toString]\nhas [attributes.toString]"
	
	
	def _createParamMarkup as String
		"""
		Returns the markup to be used for the parameters of a method
		such as 'x as int, y as int, z as int'
		"""
		params = _getParams
		sb = StringBuilder()
		for p in params
			if sb.length > 0, sb.append(', ')
			sb.append(p.createTooltipMarkup)
		
		return sb.toString
	
	
	def _createWrappedParamMarkup as String
		"""
		Returns the markup to be used for the parameters of a method
		with each parameter on its own line and indented.
		"""
		params = _getParams
		sb = StringBuilder()
		for p in params
			if sb.length > 0, sb.append(',')
			sb.appendLine
			sb.append('\t')
			sb.append(p.createTooltipMarkup)
		
		if sb.length > 0, sb.appendLine
		return sb.toString
	
	
	def _getParams as IList<of Param>
		"""
		Return the node's parameters
		"""
		require
			this inherits MemberOverload _
			or this inherits AbstractMethod _
			or this inherits MethodSig
		body
			node = this
			if node inherits MemberOverload
				return node.params
			else if node inherits AbstractMethod
				return node.params
			else if node inherits MethodSig
				return node.params
			
			# contract violation
			throw FallThroughException()