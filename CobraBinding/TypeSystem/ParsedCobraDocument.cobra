use Cobra.Compiler

use Mono.TextEditor

use MonoDevelop.Ide.TypeSystem

use ICSharpCode.NRefactory.TypeSystem

namespace TypeSystem

class ParsedCobraDocument inherits DefaultParsedDocument

	test
		# default has no region/symbol data
		doc = ParsedCobraDocument("test.cobra", "pass")
		assert doc.regionMap == nil
		assert doc.symbolTable == nil
		nodeMap = doc.createNodeMap
		assert nodeMap == nil
		# when created from the compiler, we get meaningful data
		doc = .createTestData
		assert doc.regionMap.count == doc.symbolTable.count == 5
		nodeMap = doc.createNodeMap
		assert nodeMap <> nil

	cue init(fileName as String, content as String)
		base.init(fileName)
		_content = content
		_parseErrorCount = 0

	get content from var as String
		"""The raw Cobra source code"""

	get regionMap from var as Dictionary<of ISyntaxNode, DomRegion>?
		"""Maps nodes to regions in the parsed document"""

	get symbolTable from var as Dictionary<of DomRegion, Dictionary<of String, INamedNode>>?
		"""Maps regions to maps of identifier/node pairs"""
	
	get parseErrorCount from var as int
		"""The number of ParserExceptions that exist in this document"""
	
	def add(errors as SourceException*)
		for err in errors
			try
				if err.fileName == .fileName _
				or err.fileName.length == 0
					.add(err)
			catch ex as Exception
				# why does this throw sometimes?
				trace err.toString
				print ex.toString
	
	def add(err as SourceException)
		col = err.colNum
		# most of the time, we don't get a valid column number for these.
		# but just in case...
		if col > 0, col -= 1
		.add(Error(ErrorType.Error, err.message, err.lineNum, col))
		if err inherits ParserException, _parseErrorCount += 1
		
	def add(mod as CobraModule)
		.ast = mod
		visitor = CobraModuleVisitor()
		visitor.visit(mod)
		_regionMap = visitor.regionMap
		_symbolTable = visitor.symbolTable
		
	def createNodeMap as Dictionary<of DomRegion, ISyntaxNode>?
		"""
		Returns a map of DomRegions to ISyntaxNodes given a map of ISyntaxNodes to DomRegions.
		
		Essentially, this is a reverse map of the .regionMap dictionary.
		"""
		ensure
			_regionMap implies result
			_regionMap implies all for node in _regionMap.keys get node in result.values
			_regionMap implies all for region in _regionMap.values get region in result.keys
		body
			if _regionMap == nil, return nil
			nodeMap = Dictionary<of DomRegion, ISyntaxNode>()
			for node, region in _regionMap
				nodeMap[region] = node
			
			return nodeMap
		
	def getContainingRegions(line as int, col as int) as List<of DomRegion>
		"""
		Returns a list of document regions that contain the given document location.
		"""
		require
			_regionMap <> nil
		ensure # we'll never return more regions than what we have
			result.count <= _regionMap.values.count
		test
			doc = .createTestData
			assert doc.getContainingRegions(1, 1).count == 1
			assert doc.getContainingRegions(2, 1).count == 1
			assert doc.getContainingRegions(2, 20).count == 2
			assert doc.getContainingRegions(3, 1).count == 2
			assert doc.getContainingRegions(3, 8).count == 3
			assert doc.getContainingRegions(4, 10).count == 3
			assert doc.getContainingRegions(5, 1).count == 4
			assert doc.getContainingRegions(6, 1).count == 5
			assert doc.getContainingRegions(7, 1).count == 4 # region not extended yet
			assert doc.getContainingRegions(8, 20).count == 4
			assert doc.getContainingRegions(9, 1).count == 4
			assert doc.getContainingRegions(10, 1).count == 0 # region not extended yet
			assert doc.getContainingRegions(11, 1).count == 0 # line doesn't exist
		body
			containingRegions = List<of DomRegion>()
			for r in _regionMap.values
				if r.isInside(line, col)
					containingRegions.add(r)

			return containingRegions
			
	def extendRegions(txtDoc as TextDocument)
		"""
		Extends the code regions in the given dictionaries to include blank lines.
		
		Folding regions are not affected.
		"""
		require
			_regionMap <> nil
			_symbolTable <> nil
			.ast <> nil
		test
			doc = .createTestData
			txtDoc = TextDocument.createImmutableDocument(doc.content, true) to !
			doc.extendRegions(txtDoc)
			assert doc.getContainingRegions(1, 1).count == 1
			assert doc.getContainingRegions(2, 1).count == 1
			assert doc.getContainingRegions(2, 20).count == 2
			assert doc.getContainingRegions(3, 1).count == 2
			assert doc.getContainingRegions(3, 8).count == 3
			assert doc.getContainingRegions(4, 10).count == 3
			assert doc.getContainingRegions(5, 1).count == 4
			assert doc.getContainingRegions(6, 1).count == 5
			assert doc.getContainingRegions(7, 1).count == 5 # different
			assert doc.getContainingRegions(8, 20).count == 4
			assert doc.getContainingRegions(9, 1).count == 4
			assert doc.getContainingRegions(10, 1).count == 4 # different
			assert doc.getContainingRegions(11, 1).count == 0 # line doesn't exist
		body
			extendedRegionMap = Dictionary<of ISyntaxNode, DomRegion>()
			topNameSpace = .getAst<of CobraModule>.topNameSpace
			
			for node, region in _regionMap
				
				extendedRegion = _extendRegion(region, txtDoc)
				
				if node is topNameSpace
					# special case to make sure the top-level namespace
					# for the module encompasses all other regions
					extendedRegion = DomRegion(region.fileName,
					extendedRegion.beginLine, extendedRegion.beginColumn,
					extendedRegion.endLine, Int32.maxValue)
				
				extendedRegionMap[node] = extendedRegion
				
				idMap as Dictionary<of String, INamedNode>? = nil
				if _symbolTable.tryGetValue(region, out idMap)
					_symbolTable.remove(region)
					_symbolTable[extendedRegion] = idMap to !
					
			for node, extendedRegion in extendedRegionMap
				_regionMap[node] = extendedRegion


	def _extendRegion(region as DomRegion, txtDoc as TextDocument) as DomRegion
		"""
		Returns a copy of the given region but extends the last line
		to include all blank lines that immediately follow it.
		
		The ending point will be the 0th column of the first non-blank
		line.
		"""
		require
			region.beginLine > 0
		ensure
			result.beginLine == region.beginLine
			result.endLine >= region.endLine
		body
			beginText = txtDoc.getLineText(region.beginLine) ? ""
			minIndentLevel = Parser.getIndentLevel(beginText)
			fromLine = region.endLine + 1
			untilLine = txtDoc.lineCount
			
			for line in fromLine:untilLine
				text = txtDoc.getLineText(line)
				if text <> nil _
				and text.trim.length <> 0 _
				and Parser.getIndentLevel(text to !) <= minIndentLevel
					break
			
			if line == txtDoc.lineCount
				# special case for end of document
				col = Int32.maxValue - 1
			else
				col = 0
			
			extendedRegion = DomRegion(region.fileName, _
			region.beginLine, region.beginColumn, _
			line, col)
			
			return extendedRegion
	
	
	def resolveLocationToNode(line as int, column as int, txtDoc as TextDocument) as ISyntaxNode?
		"""
		Parses the line of text for the corrsponding location and returns
		the corresponding node from the AST.
		"""
		return .resolveOffsetToNode(txtDoc.locationToOffset(line, column), txtDoc)
		
	def resolveOffsetToWord(offset as int, txtDoc as TextDocument) as String?
		"""
		Returns the entire identifier/word (if any) containing the position 'offset'.
		"""
		test
			doc = .createTestData
			txtDoc = TextDocument.createImmutableDocument(doc.content, true) to !
			assert doc.resolveOffsetToWord(0, txtDoc) == nil
			assert doc.resolveOffsetToWord(1, txtDoc) == "namespace"
			assert doc.resolveOffsetToWord(5, txtDoc) == "namespace"
			assert doc.resolveOffsetToWord(10, txtDoc) == nil
			assert doc.resolveOffsetToWord(15, txtDoc) == "Example"
			assert doc.resolveOffsetToWord(txtDoc.textLength - 1, txtDoc) == nil
			
			methodOffset = doc.content.indexOf("def")
			assert doc.resolveOffsetToWord(methodOffset, txtDoc) == "def"
			assert doc.resolveOffsetToWord(methodOffset + 1, txtDoc) == "def"
			assert doc.resolveOffsetToWord(methodOffset + 2, txtDoc) == "def"
			assert doc.resolveOffsetToWord(methodOffset + 3, txtDoc) == nil
		body
			length = txtDoc.textLength
			if offset < 0 or offset >= length
				return nil
			
			c = txtDoc.getCharAt(offset)
			if not c.isLetter
				return nil
			
			# backtrack first
			left = offset
			while true
				left -= 1
				if left <= 0, break
				c = txtDoc.getCharAt(left)
				if not c.isLetter, break
			left += 1
			
			# now check in the forwards direction
			right = offset
			c = txtDoc.getCharAt(right)
			while c.isLetter
				right += 1
				if right >= length, break
				c = txtDoc.getCharAt(right)
				if not c.isLetter, break
			right -= 1
			
			if left <> right
				return txtDoc.getTextBetween(left, right + 1)
			
			if c.isLetter
				return c.toString
			
			# no idenfitier/word at the given offset
			return nil
	

	def resolveOffsetToNode(offset as int, txtDoc as TextDocument) as ISyntaxNode?
		"""
		Parses the line of text for the corrsponding offset and returns
		the corresponding node from the AST.
		"""
		if _regionMap == nil or _symbolTable == nil
			# not enough information to get corresponding node from location
			return nil
		
		# extract the identifier from the text at this line
		docLine = txtDoc.getLineByOffset(offset)
		sb = StringBuilder(txtDoc.getTextBetween(docLine.offset, offset))
		i = offset
		while i < docLine.endOffset
			c = txtDoc.getCharAt(i)
			if c.isLetter or c.isNumber or c == c'_'
				sb.append(c)
			else
				#TODO: Don't just break here, we need to handle generic identifiers
				break
			i += 1
		text = sb.toString.trim
		if text.length == 0, return nil
		
		location = txtDoc.offsetToLocation(offset)
		
		containingRegions = .getContainingRegions(location.line, location.column)
		node = .resolveTextToNode(text, containingRegions)
		
		if node implements IOverloadable
			# Prefer the overload declared at the current line.
			# This gives the correct overload for a declaration,
			# but not necessarily for an invocation.  We'll need
			# a smarter line parser for that.
			if node.overloadGroup == nil
				return node to ISyntaxNode
			
			for member in node.overloadGroup.members
				if member.token.lineNum == location.line
					return member to ISyntaxNode
		
		return node
	
	
	def resolveTextToNode(text as String, containingRegions as List<of DomRegion>) as ISyntaxNode?
		"""
		Parses the given line of text and returns the corresponding node from the AST.
		"""
		ids = Parser.getIdsFromText(text)
		if ids.count == 0
			# couldn't parse identifers from text
			return nil
		
		return _getNodeFromIds(ids, containingRegions)


	def _getNodeFromIds(ids as List<of String>, containingRegions as List<of DomRegion>) as ISyntaxNode?
		"""
		Given a list of identifiers, returns the syntax node in the AST, if any,
		corresponding to the last valid idenfiier.
		"""
		require
			_symbolTable <> nil
			ids.count > 0
			containingRegions.count > 0
		test
			doc = .createTestData
			regions = List<of DomRegion>()
			for r in doc._regionMap.values
				regions.add(r)
			
			node = doc._getNodeFromIds(["bogus"], regions)
			assert node == nil
			
			node = doc._getNodeFromIds(["Object"], regions)
			assert (node to Box).memberForName("toString") <> nil
			
			node = doc._getNodeFromIds(["String", "copy"], regions)
			assert (node to Method).resultType.name == "String?"
			
			node = doc._getNodeFromIds(["Example", "TestClass", "main"], regions)
			assert (node to Method).statements[0] inherits PrintStmt
			
			node = doc._getNodeFromIds(["List<of>"], regions)
			assert (node to Box).isGeneric
			
		body
			idMap as Dictionary<of String, INamedNode>? = nil
			for region in containingRegions
				if not _symbolTable.tryGetValue(region, out idMap)
					continue
				for id, parentNode in idMap
					if id == ids[0]
						remainingIds = ids[1:]
						node = _getNodeFromIds(remainingIds, parentNode to ISyntaxNode, containingRegions)
						if node <> nil, return node
			
			# node was not found
			return nil
	
	
	def _getNodeFromIds(
			ids as List<of String>,
			parent as ISyntaxNode,
			containingRegions as List<of DomRegion>
		) as ISyntaxNode?
		"""
		Given a list of identifiers, returns the syntax node in the AST, if any,
		corresponding to the last valid idenfiier.
		"""
		if ids.count == 0
			return parent
		
		memberName = ids[0]
		if parent implements INamedNode
		
			typ = parent.typeForReceiver
			if typ inherits NilableType
				typ = typ.nonNil
				
			if typ inherits PrimitiveType
				typ = typ.box
			else if typ inherits Cobra.Compiler.ArrayType
				typ = typ.box
			
			if typ implements IContainer
						
				if typ inherits NameSpace
					if typ.isWrappingDefaultNamespace, typ = typ.wrappedNamespace
					
					for useDirective in typ.useDirectives
						if useDirective.boundNameSpace == nil, continue
						nsMember = useDirective.boundNameSpace.memberForName(memberName)
						if nsMember == nil, continue
						try
							return _getNodeFromIds(ids[1:], nsMember to ISyntaxNode, containingRegions)
						catch
							throw ArgumentException()
		
				m = typ.memberForName(memberName)
				if m <> nil
					return _getNodeFromIds(ids[1:], m to ISyntaxNode, containingRegions)
				
				# a non-thread safe compiler means this code breaks more often than it works
				# so we aren't going to use it yet
				/#
				else if typ inherits Box
					# it might be an extension method
					nodeMap = .createNodeMap
					if nodeMap == nil, return nil

					# check the current namespace
					ns = .getContainingNameSpace(containingRegions, nodeMap to !)
					m = _findExtensionMember(ns, typ, memberName)
					if m <> nil
						return _getNodeFromIds(ids[1:], m to ISyntaxNode, containingRegions)
					
					# check used namespaces
					ast as CobraModule = .getAst<of CobraModule>
					topNs = ast.getDefaultNamespace
					for useDirective in topNs.useDirectives
						m = _findExtensionMember(useDirective.boundNameSpace, typ, memberName)
						if m <> nil
							return _getNodeFromIds(ids[1:], m to ISyntaxNode, containingRegions)
					
					if ns.fullName <> topNs.fullName
						# check the default namespace
						m = _findExtensionMember(topNs, typ, memberName)
						if m <> nil
							return _getNodeFromIds(ids[1:], m to ISyntaxNode, containingRegions)
				#/	
			else
				print "[parent.typeForReceiver.name] does not implement IContainer"
				print "Add a case for [parent.typeForReceiver.toString]\n"
		
		# no node found
		return nil
	
	def _findExtensionMember(ns as NameSpace?, b as Box, memberName as String) as Cobra.Compiler.IMember?
		"""
		Helper method for _getNodeFromIds
		"""
		if ns == nil
			return nil
		
		# use the unified namespace unless it's global because then it takes too long
		if not ns.isUnified and ns.unifiedNameSpace <> nil and ns.fullName <> "global"
			ns = ns.unifiedNameSpace
		
		for d in ns.declsInOrder
			if not d inherits Extension, continue
			ext = d to Extension
			if ext.extendedBox == nil _
			or not b.isAssignableTo(ext.extendedBox to !)
				continue
			
			m = ext.memberForName(memberName)
			if m <> nil
				return m
		
		return nil
		
	def isInsideComment(offset as int, txtDoc as TextDocument) as bool
		"""
		Returns true if the given location is inside a comment region.
		"""
		location = txtDoc.offsetToLocation(offset)
		line = location.line
		lineText = txtDoc.getLineText(line) ? ""
		
		if .isInsideComment(line, location.column, lineText)
			return true
		
		# handle corner case with empty doc strings
		prevLineText = txtDoc.getLineText(line - 1) ? ""
		nextLineText = txtDoc.getLineText(line + 1) ? ""
		if prevLineText.endsWith('"""') and nextLineText.endsWith('"""')
			return true
		else if prevLineText.endsWith("'''") and nextLineText.endsWith("'''")
			return true
		
		return false
	
	
	def isInsideComment(line as int, col as int, lineText as String) as bool
		"""
		Returns true if the given location is inside a comment region.
		"""
		require
			line > 0
			col >= 0
		test lineComment
			doc = ParsedCobraDocument('fake.cobra', 'pass')
			assert doc.isInsideComment(1, 0, "# comment")
			assert doc.isInsideComment(1, 1, "# comment")
			assert doc.isInsideComment(1, 15, "print 'hello' # comment")
		test commentBlock
			doc = ParsedCobraDocument('fake.cobra', 'pass')
			doc.add(FoldingRegion(DomRegion(1, 1, 4, 1), FoldType.Comment))
			assert doc.isInsideComment(2, 1, "print '#hello#'")
			doc.add(FoldingRegion(DomRegion(1, 1, 3, 1), FoldType.Undefined))
			assert doc.isInsideComment(2, 0, "print '#hello#'")
		test notInComment
			doc = ParsedCobraDocument('fake.cobra', 'pass')
			assert not doc.isInsideComment(1, 0, "print 'hello' # comment")
			assert not doc.isInsideComment(1, 1, "print 'hello' # comment")
			assert not doc.isInsideComment(1, 10, "print '#hello#'")
			doc.add(FoldingRegion(DomRegion(3, 1, 4, 1), FoldType.Comment))
			assert not doc.isInsideComment(1, 1, "print 'hello' # comment")
			doc.add(FoldingRegion(DomRegion(1, 1, 2, 1), FoldType.Undefined))
			assert not doc.isInsideComment(1, 0, "print 'hello' # comment")
		body
			if lineText.length > 0
				
				if lineText.trimStart.startsWith("#")
					return true
				
				inString = false
				stringDelim as char? = nil
				
				if col > lineText.length, col = lineText.length
				
				for i in 0:col
					c = lineText[i]
					if c == c'"' or c == c"'"
						if stringDelim == nil
							stringDelim = c
							inString = true
						else if stringDelim == c
							stringDelim = nil
							inString = false
					if c == c'#' and not inString
						return true
				
			for fold in .foldings
				if fold.type == FoldType.Comment and fold.region.isInside(line, col)
					return true
				
			return false
			
	def getContainingBox(regions as IList<of DomRegion>, nodeMap as Dictionary<of DomRegion, ISyntaxNode>) as Box?
		"""
		Iterates through the given regions and returns the innermost containing Box.
		
		Returns nil if none of the corresponding nodes inherit from Box.
		"""
		require
			regions.count > 0
			all for region in regions get nodeMap.containsKey(region)
		test
			ast = Completion.CobraCompletionTextEditorExtension.createTestData
			fakeDoc = ParsedCobraDocument('fake.cobra', 'pass')
			fakeDoc.add(ast)
			nodeMap = fakeDoc.createNodeMap to !
			regions = List<of DomRegion>()
			for r in fakeDoc.regionMap.values
				regions.add(r)
			
			b = fakeDoc.getContainingBox(regions, nodeMap)
			assert b.name == "Program"
			
			# remove the region for the "Program" node
			regions.remove(fakeDoc.regionMap[b])
			b = fakeDoc.getContainingBox(regions, nodeMap)
			# empty classes won't have regions so the next innermost box is "Fourth"
			assert b.name.startsWith("Second.extension.")
			
			regions.remove(fakeDoc.regionMap[b])
			b = fakeDoc.getContainingBox(regions, nodeMap)
			assert b.name.startsWith("First.extension.")
		body
			containingBox as Box? = nil
			innermostBeginLine = 0
			
			i = 0
			while i < regions.count
				region = regions[i]
				if region.beginLine > innermostBeginLine
					node = nodeMap[region]
					if node inherits Box
						innermostBeginLine = region.beginLine
						containingBox = node
				i += 1
			return containingBox
	
	
	def getContainingNameSpace(
			regions as IList<of DomRegion>,
			nodeMap as Dictionary<of DomRegion, ISyntaxNode>
		) as NameSpace?
		"""
		Iterates through the given regions and returns the innermost containing NameSpace.
		
		Returns nil if none of the corresponding nodes inherit from NameSpace.
		"""
		require
			regions.count > 0
			all for region in regions get nodeMap.containsKey(region)
		body
			containingNS as NameSpace? = nil
			innermostBeginLine = 0
			innermostBeginColumn = 0
			
			i = 0
			while i < regions.count
				region = regions[i]
				if region.beginLine > innermostBeginLine _
				or (region.beginLine == innermostBeginLine and region.beginColumn > innermostBeginColumn)
					node = nodeMap[region]
					if node inherits NameSpace
						innermostBeginLine = region.beginLine
						innermostBeginColumn = region.beginColumn
						containingNS = node
				i += 1
			if containingNS.isWrappingDefaultNamespace
				containingNS = containingNS.wrappedNamespace
			return containingNS



	shared
		def createTestData as ParsedCobraDocument
			"""
			This function is only for supporting test methods.
			"""
			fileName = "test.cobra"
			source = "\n" +
				"namespace Example\n" +
				"    class TestClass\n" +
				"        def main\n" +
				"            test\n" +
				"                assert true\n" +
				"\n" +
				"            body\n" +
				"                print 'derp'\n" +
				""
			cm = CompilerManager.instance
			doc = cm.parseAndBind({fileName: source}, fileName)
			return doc