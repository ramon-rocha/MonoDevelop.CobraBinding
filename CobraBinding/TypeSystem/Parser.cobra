use Cobra.Compiler

use MonoDevelop.Ide.TypeSystem
use MonoDevelop.Ide.Gui.Content
use MonoDevelop.Projects

use ICSharpCode.NRefactory
use ICSharpCode.NRefactory.TypeSystem

use MonoDevelop.CobraBinding

namespace MonoDevelop.CobraBinding.TypeSystem

class Parser inherits TypeSystemParser implements IFoldingParser
	"""
	The type system parser provides a ParsedDocument required for adding 
	information to the type system service to make the file contents available 
	for type lookup (code completion, resolving etc.).
	
	This parser also provides folds and underlines syntax errors.
	"""
	
	const TYPICAL_LINE_COUNT = 512 # 4 kB
	
	def parse(storeAst as bool, fileName as String?, content as TextReader?,
		project as MonoDevelop.Projects.Project?) as ParsedDocument
		is override
		"""
		Generates folds and parses the specified file using the Cobra Parser.
		Stores the resultant AST in the ParsedDocument when storeAst is true.
		"""
		module as CobraModule? = nil
		visitor as CobraModuleVisitor? = nil
		
		if fileName == nil or content == nil
			# brand new file created outside the context of a Cobra project
			return DefaultParsedDocument(fileName)
		
		source = content.readToEnd
		if source == nil, source = ""
		
		/# Ignore type system parse requests for files that aren't open.  This is for
		performance reasons.  If we were serializing and saving type system information,
		maybe we wouldn't do this.  Instead, we just return folds for these requests. #/
		workbench = MonoDevelop.Ide.IdeApp.workbench
		if workbench == nil, return .parse(fileName, source)
		if workbench.getDocument(fileName) == nil, return .parse(fileName, source)
		
		sourceMap = Dictionary<of String, String>()
		sourceMap[fileName] = source to !
		
		refs = List<of String>()
		
		# workaround an issue with some types from .NET 4 on Mono such as HashSet<of T>
		refs.add("System.Core")

		if project <> nil
			proj = project to DotNetProject #TODO to CobraProject

			# we need to include the paths to any referenced assemblies
			refs.addRange(proj.getReferencedAssemblies(ConfigurationSelector.default))
			
			# to generate a full AST, we need all the Cobra source files in this project
			for projFile in proj.files
				
				path = projFile.filePath.toString
				
				if path <> fileName
					if path.endsWith(CobraLanguageBinding.sourceFileExtension)
						if projFile.buildAction == BuildAction.compile
							
							reader = StreamReader(path)
							otherSource = reader.readToEnd
							if otherSource == nil, otherSource = ""
							sourceMap[path] = otherSource to !

		
		# parse the source files and bind the AST nodes to their types
		compilerResults = CompilerManager.instance.parseAndBind(sourceMap, refs, fileName to !)
		
		for entry in compilerResults
			if entry inherits CobraModule
				if entry.fileName == fileName
					# this was the requested module
					module = entry

		if module <> nil
			# create type and region maps
			visitor = CobraModuleVisitor()
			visitor.visit(module)
		
		# add folds
		parsedDoc = .parse(fileName, source) to ParsedCobraDocument

		if visitor <> nil
			parsedDoc.regionMap = visitor.regionMap
			parsedDoc.symbolTable = visitor.symbolTable
		
		# underline errors
		for err in compilerResults
			if not err inherits Module
				if err inherits ParserException and err.fileName == fileName
					parsedDoc.add(Error(ErrorType.Error, err.message, err.lineNum, err.colNum - 1))
					
				else if err inherits SourceException and err.fileName == fileName
					parsedDoc.add(Error(ErrorType.Error, err.message, err.lineNum, err.colNum))
					
				else
					print err.toString
		
		if storeAst
			parsedDoc.ast = module

		return parsedDoc

	def parse(fileName as String?, content as String?) as ParsedDocument
		"""
		implements IFoldingParser.parse

		Parse the specified file only to generate folds.  Does not generate an AST.
		"""
		parsedDoc = ParsedCobraDocument(fileName, content)
		
		reader = StringReader(content)
		folds = List<of FoldingRegion>()
		_addFolds(_getLineInformation(reader), folds)
		
		parsedDoc.add(folds)
		
		return parsedDoc
	
	def _getLineInformation(reader as StringReader) as List<of LineInformation>
		lines = List<of String>(.TYPICAL_LINE_COUNT)
		
		line = reader.readLine
		while line <> nil
			lines.add(line)
			line = reader.readLine
			
		if lines.count > 0
			return _getLineInformation(lines)
			
		return List<of LineInformation>()
		
	def _getLineInformation(lines as List<of String>) as List<of LineInformation>
		"""
		Create a list of LineInformation objects that make it easier to 
		create folding regions.
		"""
		require
			lines.count > 0
		ensure
			result.count == lines.count
		test
			source = List<of String>()
			source.add("use Foo.Namespace") # line 0
			source.add("")
			source.add("namespace Bar.Namespace")
			source.add("\tclass SomeClass")
			source.add("\t\t'''")
			source.add("\t\tDocstring text") # line 5
			source.add("\t\t'''")
			source.add("")
			source.add("\t\tdef aMethod")
			source.add("/#")
			source.add("\ta comment") # line 10
			source.add("\t\t#/")
			source.add("\t\t\t")
			source.add("\t\t\tprint 'hello world!'")
			source.add("")
			source.add("#region TestRegion")
			source.add("#endregion")
			source.add("")
			source.add("")
			
			parser = Parser()
			infoList = parser._getLineInformation(source)
			
			assert infoList[0].opensComment == false
			assert infoList[0].closesComment == false
			assert infoList[0].opensDocString == false
			assert infoList[0].closesDocString == false
			assert infoList[0].isBlank == false
			
			assert infoList[1].opensComment == false
			assert infoList[1].closesComment == false
			assert infoList[1].opensDocString == false
			assert infoList[1].closesDocString == false
			assert infoList[1].isBlank == true #
			assert infoList[1].opensRegion == false
			assert infoList[1].closesRegion == false
			
			assert infoList[4].opensComment == false
			assert infoList[4].closesComment == false
			assert infoList[4].opensDocString == true #
			assert infoList[4].closesDocString == false
			assert infoList[4].isBlank == false
			assert infoList[4].opensRegion == false
			assert infoList[4].closesRegion == false
			
			assert infoList[5].opensComment == false
			assert infoList[5].closesComment == false
			assert infoList[5].opensDocString == false
			assert infoList[5].closesDocString == false
			assert infoList[5].isBlank == false
			assert infoList[5].opensRegion == false
			assert infoList[5].closesRegion == false
				
			assert infoList[6].opensComment == false
			assert infoList[6].closesComment == false
			assert infoList[6].opensDocString == false
			assert infoList[6].closesDocString == true #
			assert infoList[6].isBlank == false
			assert infoList[6].opensRegion == false
			assert infoList[6].closesRegion == false
			
			assert infoList[9].opensComment == true #
			assert infoList[9].closesComment == false
			assert infoList[9].opensDocString == false
			assert infoList[9].closesDocString == false
			assert infoList[9].isBlank == false
			assert infoList[9].opensRegion == false
			assert infoList[9].closesRegion == false
			
			assert infoList[10].opensComment == false
			assert infoList[10].closesComment == false
			assert infoList[10].opensDocString == false
			assert infoList[10].closesDocString == false
			assert infoList[10].isBlank == false
			assert infoList[10].opensRegion == false
			assert infoList[10].closesRegion == false
			
			assert infoList[11].opensComment == false
			assert infoList[11].closesComment == true #
			assert infoList[11].opensDocString == false
			assert infoList[11].closesDocString == false
			assert infoList[11].isBlank == false
			assert infoList[11].opensRegion == false
			assert infoList[11].closesRegion == false
			
			assert infoList[12].opensComment == false
			assert infoList[12].closesComment == false
			assert infoList[12].opensDocString == false
			assert infoList[12].closesDocString == false
			assert infoList[12].isBlank == true #
			assert infoList[12].opensRegion == false
			assert infoList[12].closesRegion == false

			assert infoList[15].opensComment == false
			assert infoList[15].closesComment == false
			assert infoList[15].opensDocString == false
			assert infoList[15].closesDocString == false
			assert infoList[15].isBlank == false
			assert infoList[15].opensRegion == true #
			assert infoList[15].closesRegion == false

			assert infoList[16].opensComment == false
			assert infoList[16].closesComment == false
			assert infoList[16].opensDocString == false
			assert infoList[16].closesDocString == false
			assert infoList[16].isBlank == false
			assert infoList[16].opensRegion == false
			assert infoList[16].closesRegion == true #
		body
			info as LineInformation? = nil
			inComment = false
			inDocString = false
			docStringTag as String? = nil
			infoList = List<of LineInformation>(lines.count)
			
			for line in lines
				
				info = LineInformation(line, inComment, inDocString, docStringTag, info)
				
				if not inComment and info.opensComment
					inComment = true
				else if inComment and info.closesComment
					inComment = false
				
				if not inDocString and info.opensDocString
					inDocString = true
					docStringTag = info.docStringTag
				else if inDocString and info.closesDocString
					inDocString = false
					docStringTag = nil
			
				infoList.add(info)
				
			return infoList

	sig ClosesDelimitedBlock(info as LineInformation) as bool

	def _addFolds(infoList as List<of LineInformation>, folds as List<of FoldingRegion>)
		"""
		Adds folds to the given list of folds using the given list of line information.
		"""
		test
			source = List<of String>()
			source.add("use Foo.Namespace")
			source.add("")
			source.add("namespace Bar.Namespace")
			source.add("\tclass SomeClass")
			source.add("\t\t'''")
			source.add("\t\tDocstring text")
			source.add("\t\t'''")
			source.add("")
			source.add("#region TestRegion")
			source.add("#endregion")
			source.add("")
			source.add("\t\tdef aMethod")
			source.add("/#")
			source.add("\ta comment")
			source.add("\t\t#/")
			source.add("\t\t\t")
			source.add("\t\t\tprint 'hello world!'")
			source.add("")
			source.add("")
			
			parser = Parser()
			infoList = parser._getLineInformation(source)
			folds = List<of FoldingRegion>()
			parser._addFolds(infoList, folds)
			
			assert folds.count == 6
			
			commentBlockCount = 0
			for f in folds
				if f.type == FoldType.Comment
					commentBlockCount += 1
				else if f.type == FoldType.UserRegion
					assert f.region.endLine == 10
				else
					assert f.region.endLine == 17
					
			assert commentBlockCount == 2

		test docStrings
			source = List<of String>()
			source.add("'''")
			source.add("Program docstring")
			source.add("'''")
			source.add("interface SomeInterface")
			source.add("\t'''")
			source.add("\tDocstring text for interface")
			source.add("\t'''")
			source.add("")
			source.add("\tget aProperty")
			source.add("\t\t'''")
			source.add("\t\tProperty Docstring")
			source.add("\t\t'''")
			
			parser = Parser()
			infoList = parser._getLineInformation(source)
			folds = List<of FoldingRegion>()
			parser._addFolds(infoList, folds)
			
			assert folds.count == 5
			
			commentBlockCount = 0
			for f in folds
				if f.type == FoldType.Comment
					commentBlockCount += 1
					
			assert commentBlockCount == 3
		body
			if infoList.count < 2
				# not enough lines to create a fold
				return
			
			commentCloser as ClosesDelimitedBlock = do(i as LineInformation)
				return i.opensComment
			
			docStringCloser as ClosesDelimitedBlock = do(i as LineInformation)
				return i.opensDocString
			
			lineNumber = infoList.count
			curr as LineInformation? = infoList[lineNumber - 1]
			
			endStack = Stack<of TextLocation>()
			levelStack = Stack<of int>()

			# keep a stack of region end locations, so we can nest regions as we go
			regionStack = Stack<of TextLocation>()
			
			# go through the list backwards creating folds as we go
			while curr <> nil
			
				closer as ClosesDelimitedBlock? = nil
				
				# skip blank lines
				while curr.isBlank
					curr = curr.previous
					if curr == nil
						return
					lineNumber -= 1
				
				# handle comment blocks and doc strings
				if curr.closesComment
					closer = commentCloser
				else if curr.closesDocString
					closer = docStringCloser
				
				if closer <> nil
					endLocation = TextLocation(lineNumber, curr.line.length + 1)
					
					if closer == docStringCloser
					
						level = .getIndentLevel(curr.line)
						if level > 0
							if levelStack.count == 0 or (levelStack.count > 0 and levelStack.peek < level)
								/# We need to make sure the doc string
								closes with its containing block #/
								levelStack.push(level)
								endStack.push(endLocation)
					
					# we won't have a line that closes a delimited block without one that opens it
					blockText = curr to !
					while not closer(blockText)
						blockText = blockText.previous to !
						lineNumber -= 1
					
					curr = blockText
					startLocation = TextLocation(lineNumber, curr.line.length + 2)
					folds.add(FoldingRegion(DomRegion(startLocation, endLocation), FoldType.Comment))
					curr = curr.previous
					lineNumber -= 1
					continue

				# if a line closes a region, push the end location onto the region stack
				if curr.closesRegion
					regionStack.push(TextLocation(lineNumber, curr.line.length + 1))

				# if a line opens a region and there's >0 locations on the stack, pop it and make a fold
				else if curr.opensRegion and regionStack.count > 0
					startLocation = TextLocation(lineNumber, curr.line.length + 2)
					endLocation = regionStack.pop
					folds.add(FoldingRegion(DomRegion(startLocation, endLocation), FoldType.UserRegion))
				
				# handle indent blocks (ignore commented lines)
				if not curr.line.trimStart.startsWith("#")
					
					level = .getIndentLevel(curr.line)
					
					# should we close any regions?
					while levelStack.count > 0 and levelStack.peek > level
						levelStack.pop
						endLocation = endStack.pop
						startLocation = TextLocation(lineNumber, curr.line.length + 2)
						folds.add(FoldingRegion(DomRegion(startLocation, endLocation), FoldType.Undefined))
					
					# should we open any regions?
					if levelStack.count == 0
						first = 0
					else if level > levelStack.peek
						first = levelStack.peek
					else
						# makes the following loop do nothing
						first = level + 2
					
					for l in first : level + 1
						levelStack.push(l)
						endStack.push(TextLocation(lineNumber, curr.line.length + 1))
					
				curr = curr.previous
				lineNumber -= 1

	shared
		def getIndentLevel(line as String) as int
			"""
			Returns the number of indents for the given line.
			"""
			ensure
				result >= 0
			test
				assert .getIndentLevel("print 'hello'") == 0
				assert .getIndentLevel("\tprint 'hello'") == 1
				assert .getIndentLevel("\t\tprint 'hello'") == 2
			body
				return line.length - line.trimStart.length
		
		var _declStarters = @[
			"def ",
			"var ",
			"get ",
			"set ",
			"pro ",
			"class ",
			"interface ",
			"struct ",
		]
		
		def isStartingDecl(line as String) as bool
			"""
			Returns true if the line is an unfinished declaration such
			as 'def foo' or 'var _bar' but not 'def foo ' and not 'var _bar is'
			"""
			test
				assert Parser.isStartingDecl("class ")
				assert Parser.isStartingDecl("\tdef ")
				assert Parser.isStartingDecl("\tdef foo(")
				assert Parser.isStartingDecl("\t\tdef foo")
				assert Parser.isStartingDecl("    def bar")
				assert not Parser.isStartingDecl("use ")
				
				assert not Parser.isStartingDecl("class Bar ")
				assert not Parser.isStartingDecl("\t\tdef foo ")
				assert not Parser.isStartingDecl("    def foo is")
				assert not Parser.isStartingDecl("use MonoDevelop.Cobr")
			body
				trimmed = line.trimStart
				if trimmed.indexOf(c' ') == trimmed.lastIndexOf(c' ')
					# only one or zero spaces in the trimmed line of text, might be declaring something
					for starter in _declStarters
						if trimmed.startsWith(starter)
							return true
				
				return false
